,course_name,semester,prerequisites,ects,effects,aims,program_content,program_content_ensuring_outcomes,language
0,Introduction to Computer Science,1,General computer literacy. Simple usage of GNU/Linux operating system (how to run terminal). Programming basics.,5.0,,"To acquaint students with the history of computer science.; To acquaint students with the basics of computer science such as: number systems, algorithmics.; Making students aware of the principles of operation of digital machines and logic circuits.; Showing students basic programming structures based on the selected programming language.; Show Students typical operation principles of modern base software.","1. Modern computers and their architectures. 2. Algorithms, their description methods and simple implementations. 3. Low-level programming. 4. Program automation.
The purpose of the course is to introduce the students to the fields of computer science and engineering. The course covers fundamentals of algorithmics, data representation and computer arithmetic, as well as organization and architecture of modern computer systems hardware. The last part of the course deals with basics of programming: programming constructs, building executable files, interfacing with libraries and services provided by operational systems as well as automation facilities provided by operating systems. 1. Introduction. Theory of computation. Core concepts of computer science. Algorithms. History of computing. 2. Boolean algebra and digital logic. Combinational and sequential logic circuits. 3. Number systems and data representation. Integer and floating point datatypes. 4. Computer arithmetic. Basic operations, programming the CPU. 5. Operating systems 6. Programming basics.","This module includes material on fundamentals of computer science and related topics (logical circuits, computer arithmetic and architectures, data representation and alghoritms)",English
1,Introduction to Unix systems,1,,3.0,,giving the overview of the basics of principles and architecture of the UNIX operating systems; providing a detailed overview of useful commands and programs in average Unix operating system environment,"* Introduction to the GNU/Linux system * Working with files and commands * Shell and the system environment * Processes and tasks * Bash scripts and filters * SED and AWK * Practical use of encryption tools * Basics of administration * Basics system programming in Unix
* Introduction to GNU/Unix/Linux systems * Basics of system architecture * File subsystem * Process subsystem * Shells & scripts * Programming in the Unix system * Cryptographic methods and tools * Security model",The course aims to introduce students to the basics of using and administering the Unix operating systems.,English
2,Programming Languages I,1,n/a,5.0,,To acquaint students with the procedural paradigm of software development.,"Operators, expressions, and statements: The structure of a simple program, compiling and linking, C data types, constants, local variables, global variables, variable initialization, blocks, scope, operators, C Control statements: looping, branching and jumps, storage classes, type qualifiers
Operators, expressions, and statements: student is able to declare and initialize integer, float, double and character variables, student is able to determine the size of a variable or type using the sizeof operator, student is able to declare local and global variables, student is able to create a block of code and use it to limit the scope of visibility of variables, student is able to implement the program using C control statements, student is able to construct the correct expressions using arithmetic, logic, bit and relational operators, student is able to use the priorities of the operators when evaluating expressions.
Functions: Defining and calling functions, function declarations, formal and actual arguments, return statement, the exit and abort functions, functions category, function prototypes, parameter passing, call-by-value, call-by-reference, recursion
Functions: student is able to declare, define and call the function, student is able to pass variables to function by value and by reference, student is able to use arguments and return values, student is able to use recursion, student is able to define a function with a variable parameter list.
Arrays, pointers and strings: One-dimensional arrays, multidimensional arrays, array subscripting, array initialization, pointer variables, the address and indirection operators, pointers as arguments, pointers as return values, pointers arithmetic, using pointers for array processing, pointers and multidimensional arrays, string literals, string variables, reading and writing strings, using C string library, string idioms, arrays of strings, pointers to pointers, pointer to functions, the qsort function, dynamic storage allocation, the memory leaks, the ""dangling pointer"" problem, command line arguments
Arrays, pointers and strings: student is able to declare one-dimensional and multi-dimensional arrays, student is able to declare the pointer and get the address of the variable, student is able to use pointers for array processing, student is able to declare, read and write strings and arrays of strings, student is able to use C string library, student is able to sort an array by calling the qsort function, student is able to use the functions of the dynamic storage allocation, student is able to process the command line arguments.
Structures, unions, and enumerations: Declaring and initializing structure variables, structure types, arrays of structures, nested structures, pointers to structures, passing structures to functions as an argument, using unions to save space, using enumerations, bit fields, bit wise operators
Structures, unions, and enumerations: student is able to declare and initialize structure variables and arrays of structures, student is able to pass structures to functions by value and by reference, student is able to use unions and enumerations to save space.
The C preprocessor: Preprocessing directives, macro definitions, conditional compilation
The C preprocessor: student is able to declare function-like macros, student is able to use header files, student is able to use directives of the conditional compilation.
Abstract Data Types: Program design for Abstract Data Types (ADT), dividing a program into files, Linked List: declaring a node type, inserting and deleting a node, ordered lists, implementing the Stack ADT and the Queue ADT using Linked List, the Binary Search Tree ADT implementation
Abstract Data Types: student is able to implement linked list ADT, student is able to implement the stack ADT and the queue ADT using linked list, student is able to implement binary search tree ADT,
The standard library: Using the standard library, C89 library overview, C99 changes, C11 changes, streams, file operations, formatted input/output, mathematics, error handling, calling functions with Variable Argument List, pseudo-random sequence generation function, searching and sorting utilities, date and time manipulation functions
The standard library: student is able to compile a program that uses mathematical functions, student is able to generate pseudo-random sequences, student is able to implement file operations, student is able to use formatted input/output functions, student is able to use searching and sorting utilities of the standard library, student is able to implement date and time manipulations.
Static, shared dynamic and loadable libraries: Building a multiple-file program, Makefiles, building a static C library, building a shared dynamic C library, linking with static and dynamic C libraries, dynamic loading and un-loading of shared libraries
Static, shared dynamic and loadable libraries: student is able to build a multiple-file program, student is able to build a static C library, student is able to build a shared dynamic C library, student is able to link a program with static and dynamic C libraries, student is able to write makefiles.","Practical presentation of the procedural paradigm of software development using the C language, taking into account the dynamic and static model of memory management.",English
3,Higher algebra,1,Prerequisites and additional requirements not specified,5.0,,,"Groups: Definitions and examples Basic properties of groups Homomorphisms and isomorphisms Subgroups
Program of the classes coincides with the program of the lectures.
Cyclic Groups: Definitions Subgroups of cyclic groups
Permutation Groups: Definitions and notation Transpositions The alternating groups Dihedral groups
Cosets and Lagrange's Theorem: Cosets Lagrange's theorem Fermat's and Euler's theorems
Introduction to Cryptography: Private Key Cryptography Public Key Cryptography The RSA Cryptosystem
Normal Subgroups and Factor Groups: Normal subsgroups Factor groups The simplicity of the alternating group
Matrix Groups and Symmetry: Some facts from linear algebra The general and special linear groups The orthogonal group Symmetry groups Wallpaper groups
Rings and fields: Definitions and examples Integral domains and fields Polynomial rings Irreducible polynomials Finite fields",The goal of this course is to introduce the study of abstract algebra and to gain an understanding of the utility and importance of several algebraic structures,English
4,Mathematical Analysis,1,Prerequisites and additional requirements not specified,7.0,,,"Program of the classes coincides with the program of the lectures.
The Real Numbers: Axioms and properties of real numbers Classes of real numbers Basic lemmas on completeness
Limits: The limit of a sequence The limit of a function Series. Convergent series
Continuous Functions: Basic definitions and examples Properties of continuous functions
Differentiation: Definitions of differentiable functions The basic rules of differentiation The basic theorems of mathematical calculus Properties of differentiable functions Taylor's formula Antiderivatives
Integration: Definition of the integral Properties of the integral The integral and the derivative, the Newton--Leibniz formula Integration by parts Change of variable in an integral Applications of integration",This course is intended for students in computer science. It contains an introduction to differential and integral calculus of functions of one variable,English
5,Discrete mathematics,1,,3.0,,Introducing discrete mathematics.,"Modular arithmetic (4h)
Modular arithmetic and elements of abstract algebra (4h): Divisibility and modular arithmetic, primes and greatest common divisors, (solving congruences, applications of congruence.
Recurrence relations (4h): Recurrence relations, solving recurrence relations.
Recurrence relations (3h)
Basic definitions in graph theory (2h): Definition of a graph, a multigraph and a digraph. The order and the size of the graph. The degree of a vertex. The minimum and maximum degree of the graph. Handshaking lemma. Graph isomorphism. Subgraphs. Path and cycle definition. Conected graphs. Bipartite graphs. Matrix representation of the graph.
Test (1h)
Elements of graph theory (2h)
Eulerian and Hamiltonian graphs (1h): Euler's theorem and Fleury's algorithm. Ore's theorem. Dirac's theorem.
Eulerian and Hamiltonian graphs (1h)
Trees (2h): Definition of trees. A spanning tree. Kruskal's and Prim's algorithms.
Trees - algorithms (1h)
Flows in networks (2h): Max-flow min-cut theorem. Ford-Fulkerson algorithm.
Flows in networks (2h)
Test (1h)","Acquainting with the basic concepts, methods and problems of discrete mathematics.",English
7,Physics I,2,"Background: It will be assumed that the student has taken physics and mathematics (algebra, trigonometry and vector algebra) at the level of elementary school. Calculus is not assumed, some essential concepts will be developed as the course progresses (derivatives and integrals are used slowly at first, and routinely later on).",5.0,,1. The course aims at providing the student a good understanding of physics at the elementary level. This part covers classical mechanics and thermodynamics,"Math versus Phys: Exercises and applications 1.Equations, formulas, and vectors, subscripts and superscripts, power-of-a notation, scientific notation( rounding, error, precedence), significant figures (how accurate are we?) 2. Basics of geometry: rectangular and polar coordinates (the equation of parabola, the equation of circle, graphic solution to pairs of equations), triangles. 3. Logarithms, exponentials, and trigonometry. 4. Dimensions as algebraic quantities. 4. Elementary vector algebra - dot and cross products. Short Quiz and Test
Introduction: Topics The nature of physics, why study Physics?, scientific methods-models, scientific measurements, standards and units, dimensional analysis.scientific notation and significant figures, SI unit system, scales on our world: length, mass, time, standards, scalars and vectors.
Mechanics: introduction to kinematics: Topics Position vector, displacement, distance, time; kinematics of straight - line motion average and instantaneous velocity, average and instantaneous acceleration, motion in two and three dimensions (three-dimensional coordinate systems), velocity and acceleration in a plane (projectile motion), uniform circular motion, relative motion - Galilean transformation, computer solutions and difference formulas
Kinematic I: Exercises and applications 1.General Problem- Solving Strategy: read, draw, label, identify, equations, solve, substitute, check, simulate - problem - solving practice 2. Motion in one -dimension (1-D) : displacement, distance, average speed, average velocity, instantaneous velocity (derivative and integral), average acceleration, instantaneous acceleration, motion diagrams ( 3. 1-D motion with constant acceleration: kinematic equations derived from calculus, freely falling objects, bouncing ball.
Kinematic II: Exercises and applications 1. Vector quantities, vector algebra, geometry using vectors. 2. Motion in two (2-D) and three dimensions (3-D): the displacement, velocity, and acceleration vectors (in a plane), 2-D motion with constant acceleration, ideal projectile motion (projectile's trajectory, maximum height and range of a projectile. 3. Reducing motion in more than one dimension to one dimension (Aquathlon) 4. Uniform circular motion: tangential and radial acceleration, period, (the centripetal acceeration of the Earth) 5. Relative velocity and relative acceleration, Galilean transformation, (a boat crossing a river)
Dynamics: Topics Newton's Laws of Motion: Newton's First Law: inertia, inertial frames of reference; Newton's Second Law Motion: force and acceleration, superposition of forces, mass and weight;Newton's Third Law: forces and interactions, actions and reactions - defining of system, applying Newton's Laws, dynamics of circular motion, types of forces: contact and long-range, friction-kinetic and static, drag forces, spring force, free-body diagrams, fundamental forces of nature.
Dynamics I: Exercises and applications 1. The Laws of Motion: the concept of force, Newton's first law of motion (inertial frames), mass, Newton's second law, gravitational force and weight, Newton's third law, Galilean relativity. 2. Laws of Forces: the gravitational force, the Coulomb force, the uniform force of gravity, the elastic force, the sliding' friction force, the resistance force. Free-Body Diagrams. 3. The Fundamental Equation of Dynamics - some applications !!! 4. Non-inertial reference frames. Inertial forces (uniform and nonuniform circular motion, centrifugal force, fictitious forces in linear motion). 5. Numerical Modeling in Particle Dynamics
Momentum and Energy: Topics Impulse, collisions, center of mass, external forces and the center of mass - motion, conservation of momentum, work, power, mechanical energy: kinetic and potential, work-energy theorem, work and energy with varying forces, energy conservation, gravitational potential energy, elastic potential energy, conservative and nonconservative forces: friction and drag, the Law of Conservation of Energy, force and potential energy, machines
Systems of Particles and Extended Objects: Topics Center of mass and center of gravity, center-of-mass momentum, calculating the center of mass (volume integrals); rotation of rigid bodies: angular velocity and acceleration, polar coordinates, relating linear and angular kinematics, energy in rotational motion: rotational inertia and moment of inertia, moment of Inertia calculations, center of mass and center of gravity, parallel-axis theorem, torque and angular acceleration of the rigid body, work and power in rotational motion, combined translation and rotation: rolling without slipping and rolling friction, angular momentum of the rigid body, conservation of angular momentum, gyroscopes and precession; static equilibrium- stability of structures
Linear Momentum. The Law of Its Conservation.: Exercises and applications 1. The momentum· of a particle (a system), momentum and force, impulse, the law of momentum conservation. 2. Elastic collisions in 1-D (2-D and 3-D). 3. Totally (partially ) inelastic collisions. 4. The momentum of a system, center of mass of the system (volume integrals, examples), Newton's second law for a system of particles, center of gravity.
Gravitation: Topics Newton's Universal Law of Gravitation, gravitational potential energy, gravitational fields, projectile and satellite motion( escape speed), weight and weightlessness, Kepler's Laws and the motion of planets, black holes and event horizon, dark matter.
Energy Conservatlon Law: Exercises and applications 1. Force work and power, work done by a constant and by a varying force, , the work of the elastic force (spring). 2. Kinetic energy and the Work-Kinetic Energy Theorem. 3. Isolated system and non-isolated system, force work and conservative and non-conservative (dissipative) forces, 4. Work and potential energy, potential energy and force, potential energy of a particle in a field, conservation of mechanical energy (spring force, gravitational potential, molecular forces, potential energy and stability and many other applications !!!)
Mechanical waves: Exercises and applications 1. Basic variables of wave motion (frequency, period, amplitude, phase, velocity and wavelength) - wave function for a sinusoidal wave. 2. 1-D traveling waves- the speed of waves on strings 3. Wave equation - derivation and solution 4. Energy, power, and intensity of waves. Reﬂection, 5. Superposition principle and interference (sinusoidal waves).
Vibrations: Topics Simple harmonic motion (SHM)- equation of SHM, circular motion and SHM, displacement, amplitude, velocity, acceleration, period, frequency, angular frequency, energy in SHM, applications of SHM- simple and physical pendulum, damped oscillations, forced oscillations and resonance, resonance and music.
Solids and Fluids: Topics States of matter,tension, compression, and shear, pressure - Pascal's Principle, Archimedes' Principle- buoyant force, ideal fluid motion - Bernoulli's Equation, streamlines and the equation of continuity,viscosity, turbulence and research frontiers in fluid flow.
Gravitation: Exercises and applications 1. Newton's law of universal gravitation, gravitational constant, spherical mass distributions, gravitational potential energy. 2. Kepler's laws of planetary motion. 3. Energy considerations in planetary and satellite motion (satellite orbits, escape speed)
Periodic motion: Exercises and applications 1. Mathematical representation of Simple Harmonic Motion (SHM), the solution of Ordinary Differential Equation (ODE) for SHM. 2. Energy of the simple harmonic oscillator. 3. Comparing simple harmonic motion with uniform circular motion (period, frequency, angular frequency, amplitude). 6. The motion of a pendulum 7. Damped and forced oscillations-solution of ODE. Resonance.
Mechanical waves: Topics Coupled oscillators,derivation of the wave equation,types of waves, mathematical description of waves -wave function, particle velocity and acceleration in sinusoidal wave, wave speed and energy in wave motion, wave interference and the principle of superposition, beats, Doppler effect, reflection and standing waves, standing waves and resonance, normal modes, sound and hearing - speed of sound,sound intensity, decibel scale, music.
Thermodynamics: Exercises and applications 1. Temperature and the zeroth law of thermodynamics (thermal contact, thermal equilibrium, thermometer, gas thermometer, temperature scales, Kelvin temperature scale, thermal expansion). 2. Macroscopic description of an ideal gas- equation of state for an ideal gas, molar mass, Avogadro's number 3. Thermodynamic process (heat, work), pV -diagram, closed system, internal energy, adiabatic process, First Law of Termodynamics - some applications. 4. Empirical gas laws, adiabatic process, isobaric process, isovolumetric process, isothermal process (ideal gas) 5. Heat capacity, specific heat, calorimetry. 6. Heat engines and the Second Law of Thermodynamics- The Carnot Engine (models of gasoline and Diesel engines) 7. Entropy !!!! (entropy on a microscopic scale, disorder, the direction of time).
Thermodynamics: Topics Temperature and heat, laws of thermodynamics: the Zeroth Law (thermometers, Kelvin scale), thermal expansion, calorimetry and phases changes, mechanisms of heat transfer),the First Law (the thermodynamic system, work and heat, work done during volume changes, paths between thermodynamic states, internal energy, kinds of thermodynamic processes, cyclic processes, ideal gas, heat capacities of ideal gas,.energy transfer mechanisms, the Second Law (directions of thermodynamic processes and disorder), heat engines and efficiency, the Second Law statement, entropy, entropy and disorder, reversibility, statistical thermodynamics - probability distributions, microscopic interpretation of entropy- microscopic states, calculation of entropy, the Third Law (absolute zero); engines and refrigerators; kinetic theory of gases - assumptions of kinetic theory for an ideal gas, the equipartition of energy,the Boltzmann Distribution Law, Maxwell's Speed Distribution, molecular model for the pressure of an ideal gas molecular interpretation of temperature,
Dynamics II. Rotational Motion: Exercises and applications 1. Rotational kinematic equations: angular coordinates, the axis of rotation, angular displacement, angular speed, frequency and period of rotation, angular acceleration, rotational motion under constant angular acceleration, relations between angular and linear quantities (rotation of a rigid object about a fixed axis). 2. Rotational equilibrium and rotational dynamics: torque = moment of force, center of gravity, objects in equilibrium relationship between torque and angular acceleration, Newton's second law for rotation, work done by a torque, kinetic energy of rotation, calculation of moment of inertia, rotation about an axis through the center of mass (parallel-axis theorem), rolling without slipping. 3. The angular momentum of a particle, angular momentum of a rotating rigid object, the law of conservation of angular momentum, work, power, and energy in rotational motion 4. The motion of gyroscopes and tops (precessional motion).
Solids and fluids: Exercises and applications 1. Tension, compression, and shear (modulus of elasticity, Young's modulus, bulk modulus, shear modulus) 2. Pressure, pressure-depth relationship, gauge pressure and barometers (barometric pressure formula) 3. Pascal's Principle, Archimedes' Principle (buoyant force) 4. Ideal fluid motion - equation of continuity, Bernoulli's equation and its applications.",This course aims at providing the student an understanding of classical physics at the elementary level. It covers classical mechanics and thermodynamics together with several applications in each.,English
8,Algorithms and data structures,2,"Mathematical knowledge, (logic, matrices, graphs, logarithms etc.)",6.0,,,"1. Algorithm - basic concepts, algorithms and structures (2 hours) What is algorithm, algorithm and its analysis and correctness. Strategies for constructing algorithms, divide and conquer methods, dynamic programming, greedy methods, heuristics, and others. Elementary data structures: tables, lists and its variants, queues, stacks, other. Basic algorithms: binary search, Hoare selection, magic fives, other. 2. Introduction to computational complexity (2 hours) Time and memory complexity, basic definitions, notations and concepts. Classes of complexity of algorithms. Problems computationally difficult: NP-completeness, undecidability. 3. Recursion (2 hours) Recursion, assessment of recursive approach, ownership, recursion removal. 4. Sorting (6 hours) Internal sorting, basic classifications and problems. Simple algorithms, special and linear algorithms, Shell algorithm. Fast sorting algorithms: QuickSort and its analysis, sorting by merging, introspective sorting, others. Heap, heap sort, Priority queues. 5. Hashing (2 hours) Hashing tables, various methods and hash algorithms, applications. 6. Tree structures (6 hours) Trees and basic operations on trees, methods of searching, the problem of balancing trees. Binary trees, AVL trees, BST trees, red-black trees, splay trees, other trees. Trees and dictionary operations, B-trees, 2-3 trees. 7. Complex data structures (2 hours) Binomial heaps, Fibonacci mounds, data structures for disjoint sets. 8. Graph algorithms (4 hours) BFS and DFS search algorithms, properties, applications. Review of graph algorithms, minimal spanning trees, shortest paths, graph coloring, others. 9. Text algorithms (2 hours) Pattern search, prefix-suffixes, Knuth-Morris-Pratt algorithm, Boyer-Moore algorithm, Rabin-Karp algorithm, text data structures, other text algorithms.
The aim of the classes is to acquire practical skills in the design of algorithms and data structures discussed during the lectures. So, the classes should follow the topics presented on the lectures and should be their complement.",The aim of the module is to provide the students principles of the algorithm theory.,English
9,Logic in Computer Science,2,"Can read and write in English; reading English scientific text with full comprehension. Can listen to and understand the lecture. Basic knowledge of Mathematics with special focus on discrete mathematics. Open mind and willingness to study. Creative thinking, open mind, systematic work. No recording of the lecture/classes is allowed.",2.0,,"The goal is that the students understand foundations of logic, at least at some elementary level. And that they can apply it in professional work.","Logic in Computer Science: This is a lecture on foundations of Logic for Computer Science. Introduction to Logic and symbolic Knowledge Representation and Reasoning. Propositional Calculus: syntax, semantics, logical implication, inference, theorem proving. Design and analysis of logical models. Normal forms (CNF, DNF). The SAT problem. First Order Predicate Calculus: syntax, semantics, logical implication, inference, theorem proving. Design and analysis of logical models in FOPC. Normal forms (CNF, DNF). Resolution and Dual Resolution theorem proving. Introduction to Logic Programming and Constraint Programming.
Logic in Computer Science: Solving practical examples in logic. Propositional logic modeling, analysis, reasoning and theorem proving. First-Order Predicate Calculus - modeling, analysis, reasoning and theorem proving. Basic ideas of Logic Programming and Constraint Programming.","Introduction to formal knowledge representation and reasoning. Propositional Calculus: syntax, semantics, inference, CNF, DNF, resolution, SAT. First-Order Predicate Calculus: syntax, semantics, inference, resolution. Introduction to Logic Programming and Constraint Programming.",English
10,Programming Languages II,2,- knowledge of C programming language at least on the intermediate level - knowledge of English language at least on the intermediate level,6.0,,,"Introduction to C++ Flow Control Functions Arrays and String Structures Classes and Inheritance Smart pointers Expectation and namespace Best practices
Objects and classes: creating, destroying, special operations, static members Value semantics, reference semantics, const-correctness, move semantics Standard library: containers, iterators, algorithms, stream-based I/O operations Extending classes: composition and inheritance, polymorphism, abstract classes and interfaces Memory management Templates Errors and exceptions: handling, defining custom exceptions Namespaces == Language agnostic == using language reference writing unit tests using standard libraries effectively using IDEs effectively (a.o. debugging, refactoring) good programming practices, writing secure and easily-maintained code solving basic software engineering problems",Learning object-oriented programming in the modern C++ (C++14).,English
11,Statistics,2,"Basic knowledge of algebra ,calculus and Excel.",5.0,,"A working understanding of data analysis from the perspective of estimating uncertainty, testing hypotheses and handling real experimental data","1. Working and presentation of data 2. Reduction of data 2.1 Sample mean, variance, standard deviation, mode, median, percentils, Skewness, sample correlation coefficient 3. Probability 3.1 Basic definitions - sample space, event, operation on events 3.2 Probability space 3.3 Conditional propability, Bayes' Theorem 4. Random Variable (RV) and probability distribution 4.1 Discrete distributions 4.1.1 Binomial, Hypergeometric, Poisson, dis. 4.2 Continues distributions 4.2.2 Normal and Standard Normal dis. 4.3 Cumulative distribution 4.3 Expected value and variance of RV 5. Central Limit Theorem 5.1 Binomial vs Normal 5.2 Chi-squered distribution 6. Estimators 6.1 Point Estimator 6.1.1 Estimator of population mean and variance 6.2 Interval Estimator 6.2.1 Interval estimators of the mean of a normal population 6.2.2 t-Student distribution 6.2.3 Length of the interval 7. Statistical Hypothesis Testing 7.1 Tests concerning the mean of a normal population 7.2 p-value 7.3 Tests concerning two populations 8. Experimental errors 9.Chisquared test 10. ANOVA 1 and 2 factors",The lecture is aimed at giving students a comprehensive view on modern data analysis using statistical methods. We also show a close connection between statistics and machine learning.,English
12,Differential calculus,2,Rudiments of calculus and linear algebra.,3.0,,"To provide students with an introduction to the theory of ordinary differential equations: applications, types of differential equations and methods of solution.","Ordinary differential equations: an introduction (solutions and initial value problems, direction field, the approximation method of Euler) First order differential equations: separable equations, linear equations, homogeneous equations, exact equations Higher order linear differential equations: fundamental solutions, homogeneous linear equations with constant coefficients, superposition, non-homogeneous equations, method of undetermined coefficients, variation of constants Laplace transform: definition of the Laplace transform and its properties, inverse Laplace transform, solving linear ODEs with Laplace transform
Program of the classes coincides with the program of the lectures.",This course focuses on ordinary differential equations and their applications in science and engineering.,English
13,Physics II,3,"Advanced Calculus is not assumed, some essential concepts will be developed as the course progresses (partial derivatives and multiple integrals are used slowly at first, and routinely later on).",5.0,,"This part of physics course covers electrodynamics and modern physics concentrating on introducing the basic concepts, formulas, and terminology of a broad spectrum of modern physics topics.","Electrostatics I: Examples and applications 1. Coulomb law and the electric field - point charges, electric field lines 2. Gauss law - electric field of a continuous charge distribution, electric flux, flux through a cube, through a sphere 3. Application of Gauss's Law to charged insulators, conductors in electrostatic equilibrium 4. Motion of charged particles in a uniform electric field.
Electrostatics II: Examples and applications 1. Electric potential due to several point charges, dipole and continuous charge distributions 2. Simple applications of electrostatics: calculating capacitance ,capacitors: parallel-plate capacitor , cylindrical and spherical capacitors, energy stored in a charged capacitor, capacitors with dielectrics (polarization). 3. Equivalent capacitance - parallel and series combinations of capacitors 4. Electric dipole in an electric field (torque).
Electric current and Electromotive force: Current, direction of current flow and current density, resistivity and resistance, electromotive force (internal resistance, terminal voltage),voltage sources, direct -current circuits and symbols for circuit diagrams, Ohm's Law, resistors in series and in parallel, Kirchoff's Law's and signs convention, energy and power in electric circuits, ammeters and voltmeters, R-C circuits, conductors and semiconductors.
Magnetism: Examples and applications 1. Sources of the magnetic field (Biot-Savart law - thin straight conductor, curved wire segment, circular current loop, toroid, solenoid) 2. Motion of a charged particle in a uniform magnetic field (cyclotron, mass spectrometer, Hall effect) 3. Magnetic force acting on a current- carrying conductor (on a current segment, magnetic force between two parallel conductors) 4. Magnetic flux and Gauss's law in magnetism (rectangular loop). 5. Ampère's law- some applications,
Electromagnetic Induction: Faraday's Law, direction of induced electromotive force (EMF), generators and alternating current, Lenz's Law and response to flux changes, motional EMF, induced electric fields, displacement current and Maxwell equations for electromagnetism, Lorentz's force, inductance, mutual inductance, self-inductance and inductors, magnetic- field energy and energy storage in inductors, electromagnetic oscillations and currents: R-L, L-C and RLC circuits, impedance and phase angle, alternating current circuits,radio receivers, transformers.
Electromagnetic Waves: Generating electromagnetic radiation, Maxwell's equations and wave solutions to Maxwell's equations, key properties of electromagnetic waves, electromagnetic spectrum, speed of light, plane electromagnetic wave, Poynting Vector and electromagnetic energy flow -intensity, standing waves, polarization.
Inductance: Examples and applications 1. Self - and mutual inductance 2. Self-induced emf, inductance and emf of a solenoid 3. RL circuits( energy in a magnetic field, energy stored in an inductor, 4. LC and RLC circuits ( oscillations) 5. ac sources and resistors, inductors and capacitors in an ac circuit 6. RLC series circuit ( phasors, resonance, quality factor) 7. AC transformer'
Electromagnetic Induction: Examples and applications 1. Faraday's law of induction (motional emf - emf in a coil, rotating and sliding bar). 2. Lenz's Law and its applications (loop moving through a magnetic field). 3. Induced electric fields (by a changing magnetic field in a solenoid, direct current (dc) and alternating current (ac) generators, eddy currents 4. Displacement current and Ampère-Maxwell law (displacement current in a capacitor)'
Maxwell's Equations and electromagnetic waves: Examples and applications 1. Properties of Maxwell's equations 2. Wave solutions to Maxwell's equations (derivation of the Wave equation) 3. Poynting vector and energy transport (energy flux, radiation pressure and radiation pressure from a laser pointer, solar panels)
Light - nature and propagation: Wave front and rays, principle of last time, law's of reflection and refraction, total internal reflection, dispersion, polarization, Huygen's Principle, geometric optics - mirrors, lens images, eye and defects of vision, microscopes and telescopes, wave optics - interference (Michelson interferometer, coherence) and diffraction (single- slit and two - slits diffraction,diffraction grating, spectrographs, circular apertures, diffraction and image formation, X-ray diffraction).
Geometric Optics: Examples and applications 1. The Ray Approximation in geometric optics: light rays and shadows, Huygens' Principle applied to reflection and refraction 2. Reflection and refraction (the double-reflecting light ray, angle of refraction for glass, light passing through a slab, dispersion and prisms, the rainbow) 3. Total internal reflection (a view from the fish's eye, fiber optics) 4. Mirrors, lenses and images: ray diagrams, flat mirrors, spherical mirrors (concave and convex), flat refracting surfaces, spherical lens, thin lenses- ray diagrams for thin lenses, two lenses in a row-microscope, telescope. 4. Antennas, standing wave in cavity (microwave oven), electromagnetic spectrum
Wave Optics: Examples and applications 1. Interference and Young's double-slit experiment (measuring the wavelength of a light source), thin-film interference and Newton's rings, lens coating, interferometer). 2. Diffraction- single-slit diffraction (width of central maximum), diffraction by a circular opening, diﬀraction grating (cd or dvd as diffraction grating), x-ray diffraction and crystal structure. 3. Polarization of light waves - Malus's law, polarizer, polarization by reflection- Brewster's law'
Nuclear Physics: Examples and applications 1. Nuclear Properties: isotopes, nuclear radius and nuclear density, nuclear lifetimes, nuclear and atomic mass, binding energy 2. Nuclear reactions and Q-values: separation energy, radioactivity- exponential decay law, alpha decay, beta decay, gamma decay, carbon dating, units of radioactivity 3. Nuclear fission(fission energy yield) and nuclear fusion (fusion in the Sun)
Quantum Physics - atoms, electrons and photons: The nature of matter, space, and time, emission and absorption of light, photoelectric effect and Einstein's photon explanation, atomic line spectra and energy levels, the Bohr model, Compton scattering, blackbody radiation -continuous spectra and Planck's radiation law, wave-particle duality
Quantum Physics: Examples and applications 1. Thermal radiation, Planck's Hypothesis (radiation laws, thermal radiation from the human body, the quantized macroscopic oscillator) 2. The Photoelectric Effect (work function, photoelectrons from sodium, a photomultiplier tube, photons from a laser pointer) compton scattering Compton Scattering 3. Matter Waves: de Broglie wavelength of a raindrop, double-slit experiment for particles Heisenberg uncertainty relations: gamma-ray microscope and the uncertainty relation, energy-time uncertainty,","This part of physics course covers electrodynamics and modern physics concentrating on introducing the basic concepts, formulas, and terminology of a broad spectrum of modern physics topics.",English
14,Physics lab,3,A basic course in general physics is necessary to understand the basis of the performed experiments. Analysis of the experimental data requires knowledge of calculus and elements of statistics.,2.0,,,"Introduction to the experimental data analysis.: Introduction to methods of data analysis and estimation of the experimental uncertainty. Least square method in regression analysis. (2h)
Laboratory Course in Practical Physics: The goal of a laboratory course is to prepare students for the solution of practical problems they might meet during their professional career. Students learn basic experimental techniques and methods of analysing experimental data. Students acquire the skill and technique in the manipulation of scientific instruments and the ability to analyse the experimental data. Therefore, the course covers basic experiments, which students perform personally, working in teams of two. Students are assigned five out of twelve experiments, listed below. Each class starts with checking students' knowledge concerning current experiment. Afterwards, students perform measurements, working in pairs. Analysis of experimental data follows, partly performed during the class and finished individually at home. All the data, results and conclusions are summarised by each team in a report, subject to rating. Such a system ensures that students acquire the ability to analyse a given assignment individually as well as gain experience in cooperation with a colleague, necessary for team work. Laboratory practicals will be held at Students Laboratory WFiIS AGH. The list of experiments: 1. Determination of the acceleration due to gravity by means of a simple pendulum. 2. Refractive index of solids or liquid crystals. 3. Determination of the coefficient of viscosity for glycerine. 4. Physical pendulum, moment of inertia. 5. Velocity of sound by the interference of acoustic waves method. 6. Determination of Young modulus of a rod. 7. Focal length of a concave and a convex lens. 8. Verification of formulas for resistance in series and parallel using a Wheatstone bridge. 9. Wetting angle and surface tension. 10. Electrolysis and determination of the Faraday constant. 11. Parallel plate capacitor: determination of the dielectric constant and the speed of light. Relative permittivity of a dielectric medium. 12. Diffraction and interference of laser light.",A course in practical physics is designed to allow students acquire the skill and technique in the manipulation of scientific instruments and equipment as well as the ability to analyse the experimental data.,English
15,Object Oriented Programming,3,"Ability to program in C and C++. Knowledge of the basics of object-oriented methodology at the level of the ""Programming Languages II"" module.",6.0,,,"Laboratory classes: 1. JDK and tools available in the computer lab. - preparing a file with the source code of a simple program in Java language, based on examples from lectures, using generally accepted conventions for Java, - compiling it to the form of the byte code, interpreting the error messages and using them to introduce corrections in the code, - executing the program using a runtime environment. 2. Defining classes and creating objects in Java. - applying the available basic types, - defining classes with a set of fields, constructors and other methods (including overloaded ones), in accordance with the presented requirements, and placing prepared definitions in the appropriate files, - utilizing self-defined classes and basic library classes (e.g. String) to create objects, and using them with the help of references and available operators, - access (public, private, package) to the components of classes; using fields, methods and final classes, - the life cycle of the object, and its relationship to memory management in Java, - arrays for both simple types and objects, - how to define and use internal classes and enumeration types, - creating packages and preparing the appropriate structure of directories and source files, - differences in the implementation of the above tasks in Java and C++ languages. 3. Inheritance, interfaces and polymorphism. - hierarchy of inheriting classes corresponding to a general description of the problem, - possibilities that arise thanks to the inheritance from the Object class and its methods, - operating on objects using the effects of polymorphism, - internal classes related to inheritance relations, - how to define and use abstract classes and interfaces. 4. Exceptions and error handling. - planning how to handle errors and implement the solution using the mechanism of exceptions, - using the library classes representing exceptions and defining own classes for this purpose by placing them appropriately in the inheritance hierarchy. 5. Input/output operations, serialization. - objects representing the basic types of data streams: byte and character, buffered, associated with standard system streams, - the mechanism of writing and reading data in the application, using appropriate streams and taking into account the handling of exceptions characteristic for input/output operations, - how to serialize and deserialize an object and control which components will be subject to this process, - checking the compatibility of versions of serialized and deserialized objects. 6. Generic classes and methods. - defining methods and classes using one or several type parameters to simplify the solution to a given problem, - restricted types and wildcard arguments. 7. Collections and algorithms. - choosing the optimal collection as the most convenient data structure in a given situation, - implementations of collections - iterators, - algorithms and comparators. 8. Threads. - creating new threads and giving them different priorities, - how to synchronize the operation of threads, - communication between threads. 9. java.util package. - overview of the java.util package classes (including Date, Random, classes for strings handling, compression and archiving of data). 10. Network support. - classes from the java.net package used to transmit data using standard network protocols, - designing simple applications that work according to the client-server architecture. 11. Annotations and testing. - typical annotations to providing information for the compiler, - defining new types of annotations, - the mechanism of assertions used to basic diagnostics, - tests using JUnit and/or other tools.
Lectures: - Java language: characteristics, syntax, code creation conventions, data types, operators. Compilers and development environments. - Java classes: methods and fields, data access and encapsulation, static components, final components. Final classes. Organization of source files. Documenting classes in Java. One- and multi-dimensional tables, Arrays class. - String class and other basic Java classes. Packages: how to use and how to define them. Overloading methods. Constructors. The ""this"" reference. - Memory management, Garbage Collector. - Inheritance. Polymorphism. Early and late binding. Interfaces. Internal classes. Enumeration type. - Exceptions and error handling, checked and unchecked exceptions, hierarchy of classes representing exceptions. - Reflection mechanism - type detection. Class object. - Input/output operations. Byte and character streams. Buffering. - Serialization. Networks of objects. Versions of serialized objects. - Generic classes. Generic methods. Raw types. - Collections, iterators, comparators, algorithms. - Threads: startup, priorities, synchronization, communication. - Support for network operations. Library classes from the java.util package. - Annotations. Testing: assertions, JUnit. Debugging, JDB.","The aim of the course is to get acquainted with object-oriented programming techniques based on Java language, including software testing, thread usage or network support.",English
16,Databases I,3,,6.0,,,"Databases idea. Analysis and design of IT systems: structural analysis, Data FLow Diagrams, Entity Relationship Diagrams. CASE tools for databases design. Relational databases (keys, tables, indexes, relationships, forms, queries, reports). Structured Query Language. Programming interfaces for databases (basics). No-SQL - non- relational databases. Lectures: * Databases - introduction * Databases - components * Data models * Relational data model * Normalization * ERD * Relational Databases Management Systems * Relational algebra * SQL * API's for Databases * Non-relational databases
Topics: 1. Introduction to databases. Database Types and objects - Fundamentals of creating database structures (DDL). 2. Constraints in databases: primary and foreign keys, uniqueness, business logic. 3. Database Modeling - Part one: ERD diagrams. 4. CRUD interface: Create, Read, Update, Delete 5. Selecting data from multiple tables - joins, reporting. 6. Operators on collections: Concatenate multiple query results, nested and correlated queries. 7. Grouping and aggregation: goals, operators, syntax. 8. Database connection: How to connect a database to an external application. 9. Database Modeling - Part two: normal form. 10. Transactions in databases: The ACID model, the validation and rollback mechanism. 11. Functions, procedures, triggers. 12. Common Table Expressions (CTE) - Improved code readability. 13. Database Modeling - Part three: Functional dependencies. Terms of credit: 1. Attendance at least 11 classes; 2. To obtain a positive assessment from the average of 5 small projects carried out alone in classes; 3. Obtaining a positive assessment from a large final project, carried out outside the course of time.",This course gives the basic knowledge of modern databases. Both relational and non-relational databses are discussed. Practical part includes designing and implementing of SQL and noSQL databases.,English
17,Operating Systems,3,"Student needs to be be acquainted with the work with Unix-based systems (e.g. Linux) as a user and with programming in C language,",6.0,,Familiarize students with the organisation and functioning popular operating systems and their most important mechanisms.; Make students acquainted with programming of the basic system mechanisms at the user level on the example of the Linux system.,"Introduction.: During laboratory activities, it is necessary to prepare a set of exercises which concern the use of the selected system mechanisms. Additionally the students have to pass practical tests. One can distinguish three groups of subjects of exercises: introduction, process and threads management, interprocess communication and synchronization. The exercises in the introduction part encompasses: * code optimization techniques, * memory allocation management, * development of static and dynamic libraries, * time measurements, * file operations,
Operating Systems Overview: Computer system overview. Microprocessors. Instruction Execution. Interrupts. Memory. The evolution of operating systems. Developments leading to Modern Operating Systems. Microkernel Architecture. Microsoft Windows. Unix Systems. Linux.
Processes and threads management: Process creation and management. Threads - creation and management.
Processes and Threads.: Process structure. States of process. Process creation. Parent and child. Threads. Thread organisation. User level threads. Kernel threads. Lightweight process. Models of multi-threading. . Algorithms of processor planning. Uniprocessor scheduling. Multiprocessor i multicore scheduling. Real-time scheduling. Synchronisation. Critical section problem. Algorithms solving critical section problem. Semaphores. Monitors. Producer-consumer, reader-writer and dining philosophers problem. Deadlocks. Resource allocation graph. Deadlock prevention and avoidance. Safe state. Safe sequence. Banker algorithm.
Memory management: Memory. Organisation. Paging. Segmentation. Virtual memory. Swapping. Page replacement policies. Resident set management. Thrashing. Modules Static, shared and dynamic libraries.
Interprocess communication and synchronization: Signals, anonymous and named pipes, message queues, semaphores and shared memory, threads - synchronization, sockets.
File systems and Input-output management: File system realisation. Structure of files and directories. Files attributes. Allocation of space on the disk. Input-output management. Device drivers. Disk scheduling.",The student acquires knowledge about the organization and functions of modern operating systems and possesses the ability to use basic system mechanisms at the user level to develop a simple software.,English
18,Introduction to Computer Graphics,3,Elementary matrix algebra. Basic skills in C/C++  JavaScript programming.,5.0,,,"# Introduction to Computer Graphics. Basic ideas Classification of computer graphics . Differences between raster and vector graphics, 2D and 3D graphics. Analysis of the basic forms of fixed and programmable graphics pipelines. Brief description of graphics hardware. Review of computer graphics applications in various disciplines of science and technology. # Shadow mapping Basic algorithms for shadow creation. A simple shadow mapping on the plane. The usage of volumetric shadows. The usage of shadow maps. # Surface modeling Modeling using parametric curves and surfaces: Bezier and NURBS. Implicit surfaces. Marching cubes algorithm. # Advanced illumination models Ray tracing method. Global Illumination. Reflection and refraction rays. Optimization methods for ray tracing. Monte Carlo ray tracing. Photon mapping. # Making and rendering complex scenes Optimized rendering of complex scenes. Shading algorithms. Discussion on ‘sort first' and ‘sort last' methods. Parallel and multi-display rendering. # Visual modeling of natural phenomena. Future of computer graphics Concluding lecture. Basics models for visual modeling of natural phenomena. Comparison of physical and non-physical models. Presentation of the prospects for computer graphics. # Introduction to OpenGL/WebGL/Three.js General ideas and history of OpenGL/WebGL. Evolution of the library and fundamental differences in currently available versions. Discussion on library construction, basic functions, constants and system variables. Representation of geometric objects using a mesh of polygons. A structure of a typical WebGL/Three.js program. # Architecture and programming of graphics processing units Logical structure of GPU, description of selected examples. Discussion on cooperation CPU and GPU. The basics of the GLSL shaders language and the rules of including it into WebGL/Three.js code. # Geometry transformations 3D transformations. Discussion on affine transformations. Matrix representation of transformations. Transformations by using Three.js functions and direct manipulation on matrices. Merging transformations. Interpretation transformation in local and global coordinate systems. Movement of objects, and camera movement. Projection: types, characteristics and projection matrices. # Stack and hierarchical objects Discussion on changes in the coordinate system by putting transformation matrices on the stack. Building complex objects with many degrees of freedom. A detailed discussion of examples, e.g ‘solar system' and ‘walking robot'. # Color Perception. Illumination models A brief discussion on color theory and basic models of color. General discussions about the complexity and efficiency of the lighting model. Discussion on local ADS basic model. Using normal vectors in the calculation of lighting. Discussion on Phong, Blinn and Gouraud models of lighting. # Raster operations Overview of raster operations in OpenGL. Copying data blocks. The implementation of a sprite objects. Z-buffer and its features. # Texture mapping Basic concepts of textures and their parameters. Loading texture from file. Textures as Three.js objects. Texture mapping on geometric objects. Multitexturing, combining textures with lighting, mipmapping technique. Using textures to map the environment (sphere mapping, cube mapping). 3D textures.
# Set and visualize simple 3D scene built from ready-made objects. # Manipulating with geometry transformations. Flying over the scene. # Stack of transformation matrices. Construction of hierarchical objects. # Light modeling. # Texture mapping. # ‘Sphere mapping' and ‘cube mapping'. Special effects. # Putting the known elements into one program. # Presentation of the final program.
Students are required to complete an assigned project related to Computer Graphics.","Students will learn how to develop basic 3D graphics programs containing geometry object generation, texture mapping, illumination models, transformations, interactions and shaders programming. Tools used are: OpenGL/WebGL and Three.js libraries.",English
19,Databases II,4,Knowledge of relational database systems and SQL.,5.0,,,"* Relational database systems (short revision). * Database normalization and denormalization, impact on database performance. * NoSQL database systems: storage, processing, distribution, ACID and CAP. * GIS and spatial data. * Database systems for data warehouses, multidimensional data model, star schema. snowflake schema, OLAP cube operations. * Extract, Transform and Load (ETL) * Optimization of database performance. * Database systems security.
Implementation of a database system.
Gaining experience with database tools and programming.","The course recaps relational database models and their implementations, and goes beyond them towards: geo-spatial data processing, data warehouses, and non-relational models.",English
20,Software studio I,4,"Knowledge of methodologies of software analysis and design, programming skills",3.0,,,"The aim of the subject is to create a real project within a specific topic and thematic area with phases typical for IT projects, hence starting from the requirements engineering phase through the analysis phase, the general and detailed design phase, the implementation in a selected language, integration and finally, the testing and implementation phases. The project should also incorporate numerous important aspects such as: the choice of methodology for creating the project, the choice of software life-cycle, developing a timetable, the analysis of software architectures, versions and software configurations management and others.",The module aims to familiarize students with software engineering processes and cooperation within a project team.,English
21,Computer Networks,4,Basic knowledge about imperative programming. Basic information about operating systems.,5.0,,,"Basic issues concerning computer networks: Definitions related to computer networks. Principles and modes of data transfer in computer networks. Layered network architectures: the ISO-OSI model and other models, types of topologies of physical and logical computer networks, classifications of computer networks, organizations that regulate the development of computer networks. Transmissions in computer networks: Signal transmission - popular types of wired and wireless transmission media, topologies of computer networks, physical devices in computer networks (bridges, switches, routers, hubs, distribution boards, gates, hubs, etc.), baseband and broadband transmissions, data coding techniques in the transmission medium.
Ethernet networks i Ethernet Switches: Cisco Catalyst non-routing switches configuring techniques (EDGE segment). Cisco Catalyst Switches - configuring VLAN, VTP, VLAN Trunks. Configuring HP ProCurve, Allied Telesis, 3Com SuperStack, Nortel Networks, Linksys, Extreme Networks, Dell, Alcatel managed switches. Configuring interfaces and switch ports, telnet, SSH and WWW services, using the Terminal Access Server to configure Ethernet switches. Installation and management of Twisted Pair cabling, LSA connections, rack standards and related technologies, stacking of Ethernet switches, extensions of LAN installations: PLC gates, PoE systems, RS232 bridges. Fiber optic installations: cabling, passive devices, fiber optic media converters.
IP routing, part 1: Cisco IOS for routers. Basics of the operating system, configuring the router's IP interfaces, router network services, diagnostics operations. Configuring Legacy bridging / CRB / IRB bridges on Cisco routers. Point-to-point serial links in computer networks. Setting up Serial connections: Cisco routers and other assistive devices. Using Access Control Lists in Cisco IOS. Dynamic routing IGP (Interior) with Cisco equipment: RIP, OSPF, EIGRP. Redistribution of routes between IGP protocols. Routing between VLANs using router sub-interfaces and IEEE 802.1Q encapsulation.
Cable-based LAN, SAN, MAN and ISO OSI data layer: Theoretical foundations of Ethernet network operation and IEEE 802.3 standard (assumptions about this standard, types of physical media used, CSMA / CD, additional mechanisms: NLP / FLP, Auto-MDIX), MAC addressing, link access and collision detection, Fast, Gigabit characteristics , 10Gigabit, 40Gigabit, 100Gigabit Ethernet, VLAN (IEEE 802.1Q), Stacked VLAN Q-in-Q (IEEE 802.1ad), Cisco VTP and VTP Pruning, Private VLANS (Private, Isolated , Community VLANS), QoS (IEEE 802.1pi CoS definition in IEEE 802.1Q), configuring Ethernet managed switches, STP protocol (IEEE 802.1d), configuring IP addressing, ARP protocol, local area network diagnostics. Architecture of the CORE segment Ethernet switches: switches with Supervisor modules, switch fabric based architecture, internal switch system buses - channel management and use in module configuration, routing modules in switches. Overview of technologies used in wired LAN networks.
The Internet and Internet protocols: Internet network architecture, principles of Internet segmentation and addressing systems used on the Internet. IP protocol version 4 (basic protocol properties, IP datagram construction, datagram features enabling IP routing, fragmentation and defragmentation of IP packets, IP encapsulation), ARP protocol (operating principle, ARP packet format, MAC and IP address binding tables in devices, Inverse ARP and Reverse ARP, Proxy ARP), ICMP protocol (types of ICMP messages, message format, situations supported by ICMP, IP network diagnostics using ICMP). IPv6 protocol (address components, EUI-64 notation, IPv6 multicast, routing using IPv6, dynamic routing protocols for IPv6 (RIPng, OSPF3, EIGRP), IPv6 tunneling in IPv4 networks, TCP protocol (operating principles, connections and TCP associations, control flow and defragmentation of TCP stream, addressing and construction of TCP packets, processing of sequence numbers and confirmations in TCP, life cycle of TCP connection), UDP protocol (principles of operation, UDP addressing, UDP associations, construction of UDP packets), IPX (principles of operation, addressing used in IPX, cooperation in NetBEUI, Sequenced Packet Exchange Protocol / SPX), RTP protocol (principles of operation, construction of RTP packet, RTCP protocol, meaning of timestamps and sequence numbers, synchronization sources for data and their identification). Multicast transmission in IP networks ( addressing datagrams in multicast and special address values, Reverse path forwarding, IGMP for IPv4 and MLD for IPv6 and their versions, management of multicast groups, IGMP Querier and its operation, multicast and MAC multicast and IP address mapping, IGMP Snooping in Ethernet switches, multicast datagram and PIM protocol routing, multicast route retrieval - DVMRP, MOSPF, MBGP, PIM Spence Mode, PIM Sparse Mode and PIM Sparse-Dense Mode, significance of the Rendezvous Point and Mapping Agent unit, tunneling of multicast traffic over IP - an example of the mBone network).
IP routing basics: Internetwork Operating systems for routers - the basics of configuring examples of popular modular routers (Cisco, Juniper, Helwett Packard, Allied Telesis). Configure router IP interfaces, checklists (ACLs), serial link protocols (SLIP, PPP, HDLC), DHCP, network management using the SNMP protocol. Routing of datagrams in IP networks, IP routing and CIDR routing, routing tables, longest prefix match, rule of last resort, defining static routing rules, routing between VLAN, dynamic routing of internal type: RIP (RIPv2 and VLSM), IGRP, EIGRP, OSPF proposition (backbone area, ABR and ASBR routers, value calculation, LSA messages, Stub area, NSSArea, Totally stubby area, Virtual links), IS-IS protocol (Level 1 and Level 2 areas, metrics, building trees of the best paths), redistribution of route information between dynamic routing protocols, ODR protocol. Network Address Translation (address classification, overloading). Examples of mechanisms supporting IP datagram routing processes: the use of IP SLA (Service Level Agreement) techniques, Computer network and router simulators (GNS3, OPNET, Cisco Packet Tracer).
IPv6 routing and NAT techniques: IP NAT configurations in various variants: static translations and overloading. Configuring routers for IPv6 protocol. Dynamic routing protocols for IPv6 (OSPFv3, RIPng, EIGRP). IPv6 tunneling in IPv4 networks.
WAN and last mile technologies: Configuring Frame Relay networks. Configuring connections in ATM based fiber-based SONET / OC3 fiber networks. Configuring T-carrier / E-carrier connections. Configuring T-carrier / E-carrier connections with ATM encapsulation. Configuring SHDSL interfaces. Creating bridges over DSL (in the second ISO OSI layer). Configuring DLSAM VDSL switches (configuring ports, QoS services, ACLs in layers 2-4), configuring VDSL routers Creating ATM connections based on IMA (Inverse Multiplexing for ATM) interfaces
Physical media in computer networks: Classification of physical data transmission media in computer networks, medium selection and design of computer networks, coaxial cable media for Ethernet, Cable Modem, ATM, E-carrier / T-carrier (technical characteristics and technical limitations, plug systems), media based on a pair copper / TP for technologies: Ethernet, Token Ring, ATM, CDDI, T-carrier / E-carrier, ISDN, PTSN (characteristics, categories and types of TP cable equipment, plug and line systems for individual standards), Power Line Communication ( narrowband and broadband, types of standards, PLC protection), optic media for technologies: Ethernet, ATM, FDDI, Fiber Channel, Metro Ethernet (technical characteristics and fiber structure, multi-mode and single-mode fibers, undesirable effects during transmission, plug systems, standards fiber optic grinding, cabling assembly and devices connected to it, fiber optic cable aggregators, stand GBIC, SFP, SFP + ards, spectrum multiplexers, quality categories of optical fibers), diffused infrared media (IrDA, Li-Fi transmissions and LOS variant, IrDA transceiver characteristics, IrPHY standard, IrLAP and IrLMP protocols, Tiny TP services, IrCOMM, OBEX, IrLAN, IrSS), media based on infrared lasers (Laser Infrared Technology, technical characteristics and devices, examples of systems), microwave media (technical characteristics and devices), transmitting and receiving devices used in wireless media using radio waves (types of antennas transmitting - receivers, antenna cables, wideband and narrowband radio, transmitting power of radio devices and calculating Effective Isotropic Radiated Power, legal regulations regarding transmission power and transmission frequency in Poland), network infrastructure devices (cross-jumper systems, RACK assembly system, network cabling installation) in patchpanels: keystone and LSA, gutter ah, wall sockets, optical fiber in fiber optic distribution boxes: fiber optic splices and connecting spectrum multiplexers, other elements of active infrastructure in network installations.
Wireless networks: Data transmission techniques in the wireless medium, standards of popular wireless networks, Wi-Fi (IEEE 802.11 standards, communication modes: IBSS / Ad-Hoc and infrastructure / BSS-ESS, channel scanning techniques, configuration management Service Set, simple Wi-Fi authentication - Open system and Shared key, WEP and its properties, generation of RC4, WPA / WPA2 cipher, use of WPA-PSK, EAP protocol, WDS - types of bridges and techniques of their configuration, Wi-Fi repeaters)
Ethernet routing switches and enterprise CORE switches: Configuring routing switches. Configuring switches from CORE and CAMPUS segment. Using WAN modules in switches.
Wireless networks and access control: Configuring wireless networks (WiFi) using Cisco Aironet platform: a Cisco IOS system in these devices. WDS bridges. Management of WiFi - HotSpot router routers, configuration of DSL subscriber concentrators, configuration of wireless network security. Configuring Virtual Private Networks created with physical devices.
WAN technologies: POTS / PTSN, Frame Relay (PVC based on static DLCI and Frame Relay, PDU frame, Frame Relay Traffic Shaping, LMI protocol and SVC switching), ATM (media classification, cell processing in ATM switches, PVC / SVC, NSAP addressing and ESI, ILMI protocol, AAL layer, LANE and MPoA technologies), T-carrier / E-carrier (time slots, media classification, multiplexing), CABLE MODEM / CableTV, EFM - Ethernet in the First Mile (LRE - Long Reach Ethernet , EPON - Ethernet Passive Optical Network), asymmetric DSL (A / H / V / DSL), symmetrical DSL (SDSL), long-range satellite and wireless networks
Network traffic analysis in a computer networks: IP datagrams tracking using popular communication protocols. Traffic tracking techniques in computer networks, traffic monitoring devices.
Security and services in computer networks: Issues related to the use of cryptology in the transmission of data (cryptography and cryptanalysis, cryptosystems with symmetric and asymmetric key, selected ciphers, initialization of communication within the hybrid cryptosystem, RSA algorithm and cryptographic certification of data), Virtual Private Networks, selected protocols and distributed systems supporting the functioning of popular network services, models of services in network communication.
Exam: Test of knowledge and practical skills in the field of technologies used in computer networks",The module aims to familiarize you in intensive mode with all technologies related to computer networks - from hardware infrastructure to services.,English
22,Software engineering,4,"The general knowledge of languages and programming process foreseen in the course plan and curriculum for a given semester. The basis of mathematics (logic, graphs)",5.0,,,"The content of those classes strengthen and broaden the knowledge gained from lectures. Their aim is to analyze and create a project of an IT class system within a selected domain field.
The content of those classes strengthen and broaden the knowledge gained from lectures. Their aim is to provide information about advanced tools for creating models and practical implementation of selected UML diagrams.
1. Introduction. Models, forward and backward engineering. 2. Structured analysis/design and object-oriented system development. 3. Unified Modeling Language (UML). The origin and basic concepts. Modeling of system functionality, static structures, interactions and system behaviours, implementation aspects. Expansion mechanisms. Language OCL. 4. Software life cycles. 5. Design patterns: elements of reusable software. 6. Software architectural pattern. 7. Introduction to RUP. 8. Risk management in software development. 9. Software effort estimation techniques.","Knows and understands software engineering processes, cooperates within a project team",English
23,Formal Languages and Compilers,5,,5.0,,,"Project in formal languages and compilers: Student implements a larger translator, compiler or interpreter.
Labs in formal languages and compilers: Programming assignments: (1) lexical analyzer (scanner) (3) grammar specification and parser (2) abstract syntax tree (4) type checker and semantic analyser (5) code interpreter or generator
Lectures on formal languages and compilers: (1) Introduction: alphabet, string, language, grammar (2) Regular expression, finite automata (3) Transformations of finite automata (4) Introduction to translation (5) Lexical analysis, scanner, flex/PLY (6) Grammars, context-free grammars (7) Push-down automata (8) Syntax analysis (9) LL parsing (10) LR parsing, bison, PLY (11) Semantic analysis, type-checking, attributive grammars (12) Intermediate code generation, stack frames (13) Code optimization, program analysis (14) Assemby code, target code generation
Labs in formal languages and compilers: Programming assignments: (1) lexical analyzer (scanner) (3) grammar specification and parser (2) abstract syntax tree (4) type checker and semantic analyser (5) code interpreter or generator (6) code optimizer","Students will learn how to design a finite automaton and lexical analyzer,
design a context-free grammar, construct an abstract syntax , implement a parser and an interpreter.",English
24,Introduction to Artificial Intelligence,5,Student must know: - Object-oriented programming,5.0,,"The goal is to introduce the students into the domain of Artificial Intelligence (AI): theory, models, methods, tools, and applications.","Discussion and explanation of the subject/course syllabus during the first class. Discussion of teaching content and supporting materials (literature, websites). Introduction: history, systems, methods, areas of application. AI definitions. Architecture of intelligent systems. Knowledge base systems (KBS). The concept of an intelligent agent. Methods of representing and processing symbolic knowledge. Logic in AI. Examples of problems. Classification of models, methods and tools. State space search algorithms. Heuristic search methods. Prolog and logic programming as AI tools. Programming with constraints. Rule systems, expert systems and business rules. Decision support systems. Planning. Automatic generation of plans. Tutored and unsupervised machine learning. Semantic web and ontologies. Probabilistic methods. The Bayesian rule and networks. Other selected AI issues. Summary. Development directions.",Subject gives information on the most popular methods developed and applied in the area of Artificial Intelligence and Machine Learning,English
25,Software studio II,5,"Knowledge of methodologies of software analysis and design, programming skills",3.0,,,"The aim of the subject is to create a real project within a specific topic and thematic area with phases typical for IT projects, hence starting from the requirements engineering phase through the analysis phase, the general and detailed design phase, the implementation in a selected language, integration and finally, the testing and implementation phases. The project should also incorporate numerous important aspects such as: the choice of methodology for creating the project, the choice of software life-cycle, developing a timetable, the analysis of software architectures, versions and software configurations management and others.",The module aims to familiarize students with software engineering processes and cooperation within a project team when participating in software projects.,English
26,Digital Electronics and Microprocessors,5,Basic knowledge of theory of circuits and signals,5.0,,Transfer of basic knowledge in the field of digital electronic circuits and microprocessors,"1. Transmission line Educational outcomes: the student is able to determine the reflection coefficients of the line depending on the load student is able to determine the conditions of matching the input and output of the line on the basis of the observed course student is able to give the conditions of the capacitive effect of a long line student is able to determine the damping coefficient of the long line 2. Combinational systems Educational outcomes: student is able to perform basic logic functions in the form of sum products: NOT, AND, NAND, OR, NOR, XOR, XNOR student is able to design a simple multiplexer 2 to 1 and generalize the project for a larger number of inputs the student can build a decoder code 1 from 8 into a 7-segment display code student can build a binary code decoder for a 7-segment display code 3. Sequential systems Educational outcomes: student can build a counter with a given capacity, counting in the binary code, forward, backward and reversible student can build a numerator counting in Gray's code student can build a converter from gray code to BCD code 4. Finite state machine Educational outcomes: student is able to independently design and build a digital system that accomplishes the assumed task student is able to verify the operation of the constructed system 5. HDL in FPGA 6. Assembler in microprocessor.
Introduction to electronics. Diodes, Bipolar transistors and MOS transistors. Basics of digital electronics. Boolean algebra. Karnough maps. Minimization of logic functions using the full sum method and full products. Inverter as the basic gate of digital electronics. Static and dynamic properties of digital gates. Combinational static logic. Static CMOS logic family. Sequential synchronous and asynchronous logic. Memory mechanism. Construction and operation of static D latches and flip-flops. Counters, registers, summing and multiplying circuits. Finite state machine (FSM). Mealy and Moore systems. Binary arithmetics, number representations. Hardware description languages. Designing electronic circuits using CAD tools. FPGA - Field Programmable Gate Arrays. ALU unit and microprocessor structure. Asembler and machine code. Microprocessors in embedded systems.
1. Basics of digital electronics. Boolean algebra. Karnough maps. Minimization of logic functions using the full sum method and full products "" - the student is able to minimize the logic function, in a symbolic way, as well as using Karnough maps 2. Combinational static logic. PUN and PDN networks. Families of static logic complementary CMOS: - student is able to design and implement any combinational logic gate in CMOS technology at the level of transistors (e.g. 3. Sequential synchronous digital circuits: - student is able to design and implement basic sequential circuits at the level of flip-flops and logic gates (eg counters) 4. Counters and registers as typical FSM circuits. 5. Binary arithmetics and number representations. 6. Description of logic gates using Hardware Description Language. 7. Basic programming statements using assembler",The above classes should enable the student to understand the operation of basic digital electronic circuits and microprocessors.,English
27,Cybersecurity,6,"In order to participate in the course, the student shall have basic knowledge of communication protocols (e.g. TCP/IP), cryptography (SSL/PKI), databases (SQL), operating systems and web applications.",5.0,,,"Students are required to complete an assigned case-study project related to either security research/assessment or designing of security measures for the defined system.
Cybersecurity Basics: This topic will cover basic definitions, the issue of system complexity, and a number of samples and statistics related to security issues around the world.
Penetration tests: A number of guided penetration tests of a provided web application
Web Applications: The subject covers implementation of authR/authN (and related issues for web applications), and common attacks against the web applications as well as their users. This includes the OWASP Top 10 as well as some less common examples. Some of the key OWASP projects will also be discussed.
Basic cryptography: Encryption and decryption of messages, setting up a CA for PKI, etc.
Network traffic control: Monitoring of network traffic, setting up of a sample rule-based firewall configuration. Web Application Firewall.
Malware: The malware will be discussed in terms of their proliferation methods as well as their abilities to perform specific tasks at the infected machines. Some specific examples of the malware will be presented in more detail, together with some statistics, trends and geographical distribution. Discussion of bot-nets, and malware for mobile phones.
Cryptography: This subject will cover an applied cryptography - symmetric and asymmetric encryption, available algorithms and their properties, digital signing and Public Key Infrastructure.
Network, IoT & OS security: This topic will include network and OS-related attacks and vulnerabilities, including exploitation of the communication protocols. Part of the subject will be dedicated to wireless network and their related issues.
Social engineering & procedures: This will cover various technical and non-technical (mostly sociological) methods to convince users to do things they shouldn't do. Includes phishing, baits, abuse of procedures and/or human behavioral patterns, etc.
Risk assessment & secure development: There is no such thing as absolute security. In order to manage and improve the security of software system and applications, software development must incorporate tools and procedures to assess the risks, and manage the SDLC in a way that will allow to control the security issues. This topic will cover current best practices, standards and security audits.",The course will cover various aspects of systems' security. Students who complete the course will be aware of various threats and protection/prevention techniques and basics of risk management.,English
28,Web application technologies,6,"The course has following prerequisites: * basic knowledge of operating systems, * basic knowledge of computer networks.",5.0,,Familiarising students with technologies fundamental for web application development; Passing knowledge about good practices in web design; Making students aware about the distinction between content and styling in web applications; Building strong understanding of web application architectures,"History of the web, network foundations and protocols used for web application development
Design of websites: HTML, CSS, responsive design, basics of typography
Client-side interaction: JavaScript and related frameworks
Server-side development: building and deploying web apps using Flask and other technologies, designing REST APIs for communication with front-end",The course focuses on practical aspects of creating web apps. Students will learn modern technologies on laboratories and later will practice it in their projects deployed on the cloud.,English
29,Embedded systems,6,Student must know: - Programming fundamentals - Microcontrollers,5.0,,,"Embedded Systems Labs: Arduino - Introduction and description of rules, - Communication through serial ports, - Implementation of simple procedures for LED diods, - Functionality of microcotroller interruptions, - Connection of LCD - implementation of dedicated procedures, - Temperature measurements - integration with Arduino and implementation, - Gyroscope - integration with Arduino and implementation, - Design and implementation of communication protocol for Arduino - Arduino. RPi - Raspberry Pi - fundamentals, GPIO (General Purpose Input/Output) interface, - Integration of rangefinder and servo with RPi - software implementation, - Integration of camera with RPi, - Design and implementation of communication software for PC - RPi. Beacon - Communication testing for various devices and scenarios.
Embedded Systems Lectures: Introduction to embedded systems - Rules, - Fundamentals of electronics. Arduino - GPIO - communication interface, - PWM (ang. Pulse-Width Modulation) - possibilities of signal control, - DC engines - integration and control, - Internal and external interruptions, - Peripherical devices e.g. bluetooth, accelerometer, hygromeyter, termometer, LCD, GPS, - Software implementation for PC - Arduino communication. Raspberry Pi - Communication protocols: SPI, IIC, - Peripherical devices: cameras, servos, engines, - Software implementation for PC - RPi communication, - Real time operation systems for RPi. Beacons - Review of devices and theri applications
Embedded Systems Project: Design of microcontroller with selected peripherical device, implementation of software for Arduino and RPi.",Subject gives information on design of devices based on the most popular microcontrollers on the market. The part of the lectures and classes is focused on software implementation aspects.,English
30,Professional practice,6,n/a,4.0,,The aim of the module is to put into practice the skills acquired during the studies and to learn the specifics of the real workplace.,The professional practice internship takes place after the 6th semester of study in Computer Science. It aims at understanding the specifics of the IT engineer work similar to the future workplace of a graduate in the field of Information Technology.,Student will have the opportunity to use the knowledge gained during the studies in professional practice.,English
31,Final Project,7,Knowledge of subjects mastered during studies related to the thesis topic.,15.0,,,Preparation of the diploma thesis,"Diploma thesis is an independent development of a solution for a specific scientific problem related to the field of study, an engineering task with a clearly defined goal with a strong practical aspect.",English
32,Diploma Seminar,7,,1.0,,"To equip students with the fundamental principles of engineering thesis preparation and presentation skills.; To enable students to effectively discuss the purpose, scope, and progress of their engineering projects and to successfully defend their thesis.","In the first part of the course, the lecturers present the basic principles of preparation of engineering work and presentation for a thesis defense. In the rest of the course, students prepare presentations, which aim to discuss the purpose, scope and current progress of their engineering works. The course aims to prepare students for the thesis defense.",The aim of the seminar is to prepare students for the diploma exam.,English
