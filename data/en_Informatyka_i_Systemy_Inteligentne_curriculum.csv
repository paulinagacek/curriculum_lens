,course_name,semester,prerequisites,ects,effects,program_content,program_content_ensuring_outcomes,language
0,Linear Algebra and Analytic Geometry,1,"Knowledge of basic information about geometric figures and elementary functions, as well as polynomials and their roots. Basic information about complex numbers.",5.0,Has knowledge of matrix calculus and analytic geometry; Has knowledge to create static vector-matrix models of the real world; Has knowledge of the structure of a linear system. Is able to analyze the properties of a static and dynamic linear system using knowledge of the structure; Is able to use matrix calculus and is able to solve linear equations. Is aware of the role of applications of mathematics and applied computer science; Is able to use matrix calculus and is able to solve linear equations. Knows the basics of computer graphics.; The student is ready for simple tasks in the field of applied computer science,"During lectures, students become familiar with the basic problems of linear algebra, including matrix calculus and the basics of analytic geometry.
During the exercises, the student gains basic calculation skills from the matrix theory. He also becomes familiar with the basic description of geometric figures.","LECTURE OUTLINE: Linear spaces and transformations (10 hrs) Matrices and vector-matrix linear equations. Structure of a system. (10 hrs) Analytic geometry (8 hrs) TABLE OF CONTENTS OF LECTURES (page numbers indicate pages in my notes, modified from time to time): 1. Introduction: linear equation Ax = b. Analytic geometry – study of geometric figures reduced to solving systems of equations. 2. The equation Ax = b, for n = 2, solution and matrix interpretation, p. 1. 3. Determinant for n = 2 and n = 3, p. 2. Sarus’ rule. 4. Cramer’s rule. 5. Determinant, minor, algebraic complement, p. 3. 6. Properties of determinants, p. 4. 7. Triangular matrix, p. 5. 8. Adjoint matrix and inverse, p. 6. 9. Minor of degree k taken out of a matrix, rank of a matrix, p. 7. 10. How to investigate the rank of a matrix? 11. Linear (vector) space, p. 7. 12. n-dimensional vector, linearly dependent and independent vectors, p. 8. 13. Condition of linear independence, p. 8. 14. The general case of a system of linear equations, p. 8. Capelli's condition. 15. Inhomogeneous and homogeneous equation, p. 8, 9. 16. Number of linearly independent solutions, p. 9. 17. Subspace of solutions. The generalized solution (optimal approximation). 18. How to search for a solution? Practical remarks, p. 10. Structure of a linear system. 19. Matrix algebra (equality of matrices, addition, multiplication, unit matrix), pp. 11, 12, 13. 20. n-dimensional linear space, p. 13. 21. Basis of space, dimension of space, p. 14. 22. Mapping (transformation) Z^n → Z^m, p. 14. 23. General remarks about f: X → Y, the special case when f is linear, p. 15. 24. Mapping matrix, p. 17. 25. Composition of transformations, p. 18. 26. Euclidean vector space, affine space. 27. Affine transformations, vector-matrix form, isometries. 28. Analytic description of geometric figures. Convex sets. Distance of figures. 29. Dot product (x|y), orthogonal vectors, Schwarz's inequality, p. 18. 30. Parallelism and perpendicularity. 31. Length of a vector (vector norm), Gram matrix, p. 19. 32. Remarks on complex numbers, p. 19. 33. Dyadic product, p. 19. 34. Selected special matrices (triangular, scalar, diagonal), p. 20. 35. Properties of transposed matrices, powers of square matrices, p. 20. 36. Other important properties, p. 21. 37. The coordinate system. Change of variables, equivalent and similar matrices (canonical form), pp. 21, 22. 38. Eigenvalues ​​and eigenvectors of a square n x n matrix A, p. 25. 39. Characteristic polynomial, pp. 25,26. 40. Principal vectors of a square n x n matrix A, p. 26. 41. The number of linearly independent principal vectors, p. 26. 42. The transformation matrix to the Jordan canonical form, p. 28. 29. 43. Jordan canonical form, p. 31. 44. Matrices of polynomials, equivalence of polynomial matrices (canonical form), p. 32. 45. Invariant factors and elementary divisors, pp. 32, 33. 46. The particular polynomial matrix A(lambda) = lambda I – A, p. 33. 47. The Hamilton–Cayley theorem (examples of applications), p. 33. 48. The real canonical form J for a real matrix A, p. 35. 49. Forms canonical for special matrices, p. 36. 50. Normal, unitary, Hermitian, skew-Hermitian, symmetric matrices, p. 36. 51. Quadratic form f(x) = (x|Ax) = x^T Ax, positive definiteness (of a matrix form), p. 39. 52. Geometric interpretation of quadratic forms. 53. Vector norm and matrix norm (e.g. spectral), p. 40. 54. Estimation of the error of a numerical solution, p. 40. Auditory exercises Exercise topics 1. adding, multiplying matrices 2. determinants of matrices 3. inverting matrices 4. solving systems of algebraic equations – Cramer's rule 5. solving systems of algebraic equations – Kronecker–Capelli condition 6. complex numbers, basic operations: addition, multiplication, division, complex roots of polynomials and their multiplicities 7. linear (vector) space and its basis (basis). Dimension of space. Transformation matrix. 8. canonical (real and complex) Jordan form of a matrix, Frobenius canonical form 9. determination of eigenvectors, principal 10. Cayley-Hamiloton theorem and its use, e.g., to determine inverse matrices 11. affine transformations 12. geometric figures in Euclidean space, quadratic forms.",Polish
1,Mathematical analysis 1,1,,7.0,"knows standard mathematical symbols, basic concepts related to functions, basic elementary functions and their properties, concepts and methods of mathematical analysis and recognizes their usefulness in describing physical phenomena and technical issues, and recognizes the limitations of these methods in the case of their numerical implementation.; knows the concept of the limit of a sequence and the limit of a function, knows the definition of a derivative and its geometric and physical interpretations; knows the applications of differential calculus of functions of one real variable to the study of functions and to approximate calculations.; knows the concept of an antiderivative function and the method of determining an indefinite integral, knows the concept of the Riemann integral and the methods of its calculation, knows the concept of a multiple integral, the methods of its calculation and application; knows the methodology of generalizing differential and integral calculus of functions of one variable to the case of functions of several variables; knows the concept of a numerical and functional series and the types and criteria of its convergence. knows power series and Fourier series and their applications; is able to state the basic properties of new mathematical objects based on independently acquired teaching materials. Makes an objective assessment of the credibility of the information obtained in the light of previously learned facts.; is able to calculate the limits of simple sequences and functions, understands the concept of a limit transition and asymptotics of functions. is able to use the tools of differential calculus of functions of one real variable to investigate the properties of functions and for approximate calculations; is able to determine the indefinite integral and the Riemann integral and apply it to geometric and physical problems; is able to use differential and integral calculus of many variables to describe basic physical and technical phenomena; the student feels the need for self-education, being aware that the knowledge provided during studies is not complete due to time constraints","Basic concepts related to functions - domain, codomain, truncation of a function, image and inverse image (properties). Important types of functions: injection, surjection, bijection. Composition of functions and inverse functions. Ordinal properties of number sets - good ordering N and its consequence the principle of mathematical induction, - dense ordering W - continuous ordering R and the principle of continuity. Real functions - operations on functions. Real functions of a real variable and concepts related to them: increasing, decreasing, periodic, even, odd function. Equicardinality of sets: finite and infinite sets, countable and uncountable sets. The Cartesian product of countable sets is countable. Q is countable (as a conclusion). R is uncountable (3h).
Number sequences: limit, convergence theorems, Cauchy condition, limit arithmetic, inequalities in limit crossings, theorem on three sequences (3h).
Limit of a function at a point - Heine's and Cauchy's definitions of a limit, arithmetic properties of limits of functions with real arguments and values, limits at infinity and improper limits, one-sided limits, infinitesimal. Continuity of a real function of a real variable. Basic theorems on continuous functions (3h).
Differential calculus of functions of one real variable, Derivative and differential, calculation of derivatives (differentiation and arithmetic operations, differentiation of a composite function, inverse function, derivatives of elementary functions, mean value theorem, maxima and minima, Rolle's theorem, de 1'Hopital's theorem, necessary and sufficient conditions for having a local extremum. Higher order derivatives, Taylor's theorem, concavity and convexity, point of inflection, asymptotes. (5h).
Integral calculus. Indefinite integrals, basic formulas, integration by change of variable and by parts. Recurrence formulas. Integration of rational functions and selected classes of irrational functions. Riemann's definite integral, upper and lower integrals, integrability of continuous and monotonic functions, necessary and sufficient condition of integrability in the sense of Riemann. Connection of integration and differentiation, basic theorems of integral calculus, mean value theorem. Integration by change of variable and by parts for definite integrals. Applications of Riemann's integral: area of ​​a plane region, volume of a solid of revolution, rectifiable curves. Improper integrals (with infinite limits and integrals of unbounded functions). Convergence criteria, absolute and conditional convergence (7h)
Series. Number series with non-negative terms - convergence criteria - comparative, quotient, integral, d'Alambert, Cauchy. Absolute and conditional convergence, alternating series and Leibnitz criterion. Cauchy product of series. Functional sequences and series. Uniform convergence, connection with continuity, integration and differentiation, power series, analytic functions. Orthogonal series in unitary spaces. Fourier series, Bessel's inequality, Parseval's equality, convergence in the L2 norm. Fourier trigonometric series in real and complex form. Dirichlet's theorem on pointwise convergence (6h)
Differential calculus of functions of many variables. Differentiability of functions of many variables, Frechet's derivative. Gradient. Directional and partial derivatives. Examples. Rules of differentiation. Differentiation of maps, Jacobi matrix, differentiation of a complex map, mean value theorem, inverse function theorem, implicit function theorem. Second-order partial derivatives, Schwarz's theorem, Taylor's formula with second-order derivatives, class C2 functions. Local extrema, necessary and sufficient condition, extrema of implicit functions. Conditional extrema, theorem on Lagrange multipliers (7h)
Double and triple integrals. Jordan measure of a set, definition of an integral, conversion to an iterated integral, change of variables. Polar, spherical and cylindrical coordinates. Applications of multiple integrals. Directed and undirected line integrals in R2 and R3, orientation of a curve, Green's theorem. Unoriented surface integrals, conversion to a double integral. Oriented surface patches, oriented surface integrals, Gauss-Ostrogradski theorem, Stokes theorem (8h).","1. Basic concepts related to functions – domain, codomain, truncation of a function, image and inverse image (properties). Important types of functions: injection, surjection, bijection. Composition of functions and inverse functions. Ordinal properties of number sets – well-ordering N and its consequence the principle of mathematical induction,- dense ordering W- continuous ordering R and the principle of continuity. Real functions – operations on functions. Real functions of a real variable and concepts related to them: increasing, decreasing, periodic, even, odd function. Equicardinality of sets: finite and infinite sets, countable and uncountable sets. The Cartesian product of countable sets is countable. Q is countable (as a conclusion). R is uncountable (3h). 2. Number sequences: limit, convergence theorems, Cauchy condition, arithmetic of limits, inequalities in limit crossings, theorem on three sequences (3h). 3. Limit of a function at a point - Heine's and Cauchy's definitions of the limit, arithmetic properties of limits of functions with arguments and real values, limits at infinity and improper limits, one-sided limits, infinitesimals. Continuity of a real function of a real variable. Basic theorems on continuous functions (3h). 5. Differential calculus of functions of one real variable, Derivative and differential, calculation of derivatives (differentiation and arithmetic operations, differentiation of a composite function, inverse function, derivatives of elementary functions, mean value theorem, maxima and minima, Rolle's theorem, de 1'Hopital's theorem, necessary and sufficient conditions for having a local extremum. Higher order derivatives, Taylor's theorem, concavity and convexity, point of inflection, asymptotes. (5h). 6. Integral calculus. Indefinite integrals, basic formulas, integration by changing a variable and by parts. Recursive formulas. Integration of rational functions and selected classes of irrational functions. Riemann's definite integral, upper and lower integrals, integrability of continuous and monotonic functions, necessary and sufficient condition for integrability in the sense of Riemann. Connection of integration and differentiation, basic theorems of integral calculus, mean value theorem. Integration by change of variable and by parts for definite integral. Applications of Riemann integral: area of ​​a flat region, volume of a solid of revolution, rectifiable curves. Improper integrals (with infinite limits and integrals of unbounded functions). Convergence criteria, absolute and conditional convergence (7h) 7. Number series. Number series with non-negative terms – convergence criteria – comparative, quotient, integral, d’Alambert, Cauchy. Absolute and conditional convergence, alternating series and Leibnitz criterion. Cauchy product of series. Functional sequences and series. Uniform convergence, connection with continuity, integration and differentiation, power series, analytic functions. Orthogonal series in unitary spaces. Fourier series, Bessel's inequality, Parseval's equality, convergence in the L2 norm. Fourier trigonometric series in real and complex form. Dirichlet's theorem on pointwise convergence (6h) 8. Differentiability of functions of several variables, Frechet's derivative. Gradient. Directional and partial derivatives. Examples. Rules of differentiation. Differentiation of maps, Jacobi matrix, differentiation of a complex map, mean value theorem, inverse function theorem, implicit function theorem. Second-order partial derivatives, Schwarz's theorem, Taylor's formula with second-order derivatives, class C2 functions. Local extrema, necessary and sufficient condition, extrema of implicit functions. Conditional extrema, theorem. on Lagrange multipliers (7h) 9. Double and triple integrals. Jordan measure of a set, definition of an integral, conversion to an iterated integral, change of variables. Polar, spherical and cylindrical coordinates. Applications of multiple integrals. Directed and undirected line integrals in R2 and R3, orientation of a curve, Green's theorem. Unoriented surface integrals, conversion to a double integral. Oriented surface patches, oriented surface integrals, Gauss-Ostrogradski theorem, Stokes theorem (8h).",Polish
2,Introduction to Computer Science,1,No prerequisites,3.0,"Knows and understands the basic problems of modern computer science; Knows and understands the basic issues discussed in computer science studies; Is able to design a simple formal grammar, is able to conduct grammatical analysis using various methods; Knows the basic issues of information theory, is able to use them in practice; Understands the basic social problems in relation to computer science","Introduction to the scope and subject of computer science, development of computer science, selected computer models. Algorithm and basic concepts, computational complexity of an algorithm, basic, classes of computational complexity, taxonomy and meaning. Formal languages, formal grammar, Chomsky classification, grammatical parsing, compilers, structure and operation of a compiler, review of compilation algorithms. Paradigms of programming languages ​​- meaning and review. Introduction to information theory, information measures. Uncertainty, the concept of entropy. Compression. Shannon, Fano and Huffman coding. Message transmission, channel capacity. Kolmogorov information complexity. Computer networks. Types and topologies of networks. Wired and wireless networks: Ethernet, WiFi, Bluetooth. ISO-OSI model. Selected network protocols. Selected applications of computers. Application programming, modeling and simulations, large-scale computing, embedded systems, ubiquitous computing. Multimedia systems.
Basic problems in formal definition of subsets of regular and context-free languages. Typical course of grammatical parsing processes, compiler construction. Basic problems in information theory, entropy and coding.","Introduction to the scope and subject of computer science Algorithm and basic concepts, Formal languages, Paradigms of programming languages ​​Introduction to information theory, Computer networks. Selected applications of computers.",Polish
3,Logic for IT specialists,1,"Elementary knowledge of English is required - to the extent that allows studying professional literature with understanding. Textbooks and auxiliary materials will be available mainly in English. In addition, elementary knowledge of discrete mathematics in the field of set algebra and relational algebra, as well as the basics of graph theory is required. Preparation for independent study of literature, analytical thinking skills, creativity in solving problems, independence, enthusiasm for work, perseverance and enthusiasm - positive thinking are needed. Systematic work aimed at full understanding of the material and durability of learning effects. I also ask for attendance at lectures and taking notes during the lecture. In case of ambiguities, doubts, misunderstanding of the content, questions can and should be asked. Activity, discussion, independent development and presentation of selected issues are welcome. The lecturer DOES NOT CONSENT to any form of electronic recording of the content of the presented lecture (audio or video) without prior agreement on the terms and conditions in this regard.",4.0,"Theoretical foundations of logic: syntax and semantics, notation, concepts, transformations, reasoning, construction and analysis of logical models.; Use logic - even in an elementary scope, but with full understanding.; Read and understand, formulate and analyze logical models. Use logic in engineering practice and everyday life.; Logically conditioned analysis, discussion and presentation of models, opinions and views; also in non-professional aspects: social and political views, knowledge of the economy, beliefs and knowledge of a social nature and concerning the protection of the natural environment, law, economics. Also in the field of philosophy, worldview, assessment of attitudes and behaviors, morality. Knowledge of logic creates the basis for a discussion based on arguments and logical reasoning, and therefore - a rational and substantive discussion.","Lecture content: Logic, logic and once again logic. In particular: Introduction to logic, the essence of logic, the role and tasks of logic, areas of application, limitations. The role and importance of language. Language and formal language. Syntax, semantics, interpretation, model. Logical properties. Deduction. The concept of logical consequence. The concept of hypothesis, theorem and tautology. Examples of formalization of problems. Examples of inference. Deduction, abduction and induction. Other models of logical and extralogical inference. The language of propositional calculus. Syntax and semantics. Rules for transforming formulas. CNF, DNF, NNF forms. Implicants and implicents. Rules of inference. Proving theorems. Decision trees and OBDD diagrams. Testing satisfiability: the SAT problem. Logic of predicate calculus. Syntax and semantics. Rules for transforming formulas. CNF, DNF, NNF forms. Rules of inference. Proving theorems. Attribute logics. Syntax and semantics. Formula transformation rules. CNF, DNF, NNF forms. Inference rules. Theorem proving. Decision tables and trees. Rule systems. Foundations of automatic theorem proving. Resolution rule. Dual resolution rule. Substitution and unification. Reduction to normal form. Skolemization. Proof strategies. Introduction to logical programming. The idea of ​​the Prolog language. Selected problems and limitations of classical logic. Selected applications and tools of logic. Information about non-classical logics. Multi-valued logics, fuzzy logic, modal and temporal logics.
Exercise topics: Propositional calculus: Writing sentences of natural language in logical symbolism. Logical matrices of complex sentences. Determining the logical values ​​of complex sentences. Tautologies of propositional calculus. Transforming formulas. Normal forms. Inference. Formal proofs, assumption-based direct and indirect proofs. Predicate calculus: Expressions written using quantifiers, scope of a quantifier, bound and free variables, correctly constructed expressions. Propositional functions, propositional function and sentence. Reading and symbolically writing mathematical expressions. Laws of propositional calculus. Quantifiers with scope restricted by a propositional function. Rules of inference. Predicates, functions, propositional formulas, terms, first-order language. Normal forms. Writing sentences of natural language in logical symbolism using predicate symbols. Elements of semantics. Selected extensions (e.g. based on the lecture).","Fundamentals of logic: formal languages, syntax, semantics, reasoning, systems modeling - and much more.",Polish
4,Programming Basics 1,1,,4.0,"the basic syntax of the C language and the method of constructing programs in the C language; the method of implementing selected, specific algorithmic problems using the C language; implement programs in the C language that use typical C language constructs and functions of standard libraries; take a critical look at the presented solution to a given problem, propose their own solution along with the justification of their opinion. They can critically assess the degree of their understanding of the problem posed.","C language syntax, basic variable types and their declarations, variable scope, pointer variables, operators, control statements.
Functions, definition, call, arguments, recursion.
Arrays, strings, structures, dynamic memory allocation, lists, trees.
Use of selected libraries.
Introduction to programming in C. Creation of simple programs containing basic elements of the C language.
Implementation of programs using functions and recursion in C.
Implementation in C of programs using arrays, strings, complex data structures in the form of lists and trees.
Implementation in C of programs using selected libraries.",Description of the C language with examples of use. Students' implementation of many programs focused on the use of various elements of the C language.,Polish
5,Introduction to Unix Systems,1,Programming basics.,2.0,the shell; the concept of the file system; the concept of threads and processes; principles of combining tools; programming the shell; processing data; automating activities; producing system software; independently solving problems of processing data stored in files; productively using Unix-type systems.,"1. shell, bash 3. regex 4. data processing: gnu coreutils, sed, awk 5. networking 6. editors: vi, emacs 7. automation: make 8. programming, processes, threads, debugging 9. version control
1. Processing of structured data files 2. File and data system analysis 3. Process management 4. Communication between users 5. Interactive data processing 6. Communication between processes","Shell, bash, data processing: gnu coreutils, sed, awk, editors: vi, emacs, automation: make, programming, processes, threads, debugging process management, user communication, interactive data processing, inter-process communication",Polish
6,Computer architectures,1,,3.0,"how a computer with microprogrammed control (from the perspective of logical solutions) works; how a computer with hardwired control (from the perspective of logical solutions) works; design and analyze digital combinational and sequential circuits. Is able to design a processor, I/O circuits and an entire computer in the form of an electronic diagram.; describe the operation of digital combinational and sequential circuits using the VHDL hardware description language. Is able to implement a processor, I/O circuits and an entire computer in VHDL.; critically look at the presented solution to a problem related to the construction of a computer, propose their own solution together with the justification of their opinion. Is able to critically assess the degree of their understanding of the problem posed.","Analysis and design of combinational circuits: logical gates (AND, OR, NOT, NAND, NOR), arithmetic circuits, encoders, decoders, multiplexers, demultiplexers, ROM memories.
Analysis and design of synchronous sequential circuits (JK, D flip-flops), registers, counters, RAM memory.
VHDL Hardware Description Language. FPGA Circuits.
Design in the form of an electronic schematic and VHDL of an example of an ALU (Arithmetic-Logic Unit).
Design in the form of an electronic schematic and VHDL of an example computer with hardware control.
Design in the form of an electronic schematic and VHDL of an example computer with microprogrammed control.
Design of I/O systems (e.g. graphics cards), parallel processing
Computer Architecture Review","Analysis and design of combinational and sequential circuits, starting with the NAND gate and the JK flip-flop and reaching the design of an example computer with hardware and microprogram control. Design of circuits and computers using VHDL.",Polish
7,IT tools,1,Lack,2.0,"possibilities and scope of applications of the LaTeX system; basic LaTeX language commands; at a basic level, problems related to the organization of group work; typesetting simple documents in the LaTeX system; using an application designed to support group work; group work using supporting IT tools","Lectures on the LaTeX system: Basics of working with the LaTeX system: LaTeX applications, document classes, document preparation stages, source file types, tex file structure, compilation, environments supporting the use of LaTeX. Basics of document typesetting in the LaTeX system: Source file structure, basic packages, source text preparation, text formatting, paragraph formatting, document structure, inserting graphics, tables, basic document classes, bibliography. Mathematical formulas.
LaTeX laboratory exercises: Basics of LaTeX document typesetting. Graphics and tables in LaTeX. Mathematical formulas in LaTeX.
Lectures on group work tools: Lectures present solutions for group work at university or in business (e-business) using modern information technologies, such as the GitHub website for programming projects and Git and Subversion software version control systems. The lectures present the basic principles of group work and cooperation in solving IT problems. The issues of building a knowledge base and exchanging information in a group (including deadlines) are discussed. The organization of work in the ""cloud"" is considered. The use of the wiki concept is also discussed.
Laboratory exercises on group work tools: Application of a centralized version control system based on client-server architecture - on the example of Apache Subversion. Application of a distributed version control system based on P2P architecture - on the example of the GiT system. Application of the HitHub hosting service, using the Git version control system. Applications using various methods of improving and implementing tasks and projects, e.g. Kanban boards and Scrum methodologies.","The course will present issues related to a number of important IT tools, such as the LaTeX text typesetting system and IT tools for group work. The more important principles of organizing group work will be discussed.",Polish
8,Physics 1,2,"Basic knowledge of physics and mathematics at the junior high and high school level is required. Additionally, it is necessary to have the ability to use differential calculus at an elementary level.",5.0,"physical phenomena and fundamental interactions in nature.; the importance of physics as a natural science, its place and role in today’s science and technology; the mutual relations between theory and experiment.; issues in the scope of: material point mechanics, rigid body, gravity, oscillatory motion and waves and the basics of thermodynamics and hydrodynamics, necessary to understand basic physical phenomena in nature and technology.; obtain information from literature, databases and other sources; is able to integrate obtained information, interpret it, as well as draw conclusions and formulate and justify opinions.; acquire mathematical foundations for describing physical phenomena and cite examples of the application of vector, differential and integral calculus in physics.; independently solve tasks in the area of ​​classical mechanics and apply appropriate physical laws to solve issues of vibrations and wave motion as well as the basics of thermodynamics and hydrodynamics.; use the acquired knowledge in practice, based on knowledge of physical phenomena.; continuous education, e.g. recognizing the need to develop skills in using mathematical tools to describe physical phenomena; taking care of non-technical aspects and effects of an engineer’s activity, including its impact on the environment and the related responsibility for decisions made.","Introduction to physics. Elements of differential, integral and vector calculus applied to simple physical problems. Subject and importance of physics as a natural science. International system of units SI - basic physical quantities and their units. Division of physical quantities into scalars and vectors. Vector features, Basic operations on vectors including scalar and vector products.
Kinematics of a material point. Description of quantities used to describe curvilinear motion. Definitions and graphical interpretation of: position vector, displacement, instantaneous and average velocity, instantaneous and average acceleration. Circular motion. Free fall, projections: vertical, horizontal, oblique.
Dynamics of a material point. Newton's laws of dynamics. Examples of applications. Mass and weight. Friction forces (static and dynamic friction). Inertial and non-inertial systems (inertial forces). Centrifugal and Coriolis acceleration (examples). Work, power, energy. Theorem of work and kinetic energy. Potential energy, conservative forces. Principle of conservation of energy. Motion of the center of mass system, principle of conservation of momentum. Principles of dynamics for systems with variable mass.
Gravity. Quantities characterizing the gravitational field: intensity, potential, potential energy, flux. Gauss's law and examples of its applications. Gravitational energy of a sphere. Kepler's laws, gravitational acceleration, Foucault's pendulum.
Dynamics of a rigid body. Discrete and continuous mass distribution. Center of mass, basic concepts of the dynamics of rotational motion of a material point and a rigid body. The moment of inertia tensor and Steiner's theorem. Examples of moment of inertia calculations.
Vibrations, harmonic oscillator. Mechanical properties of solids. Strain and stress. Hooke's law. Simple linear oscillator. Damped and forced vibrations. Resonance (amplitude and phase shift). Pendulums (physical, mathematical and torsional), composition of vibrations.
Mechanical waves. Description of wave phenomena, equation of a plane wave in space and the wave equation. Elastic wave in a solid and in gases. Standing wave. Basic concepts of acoustics, the Doppler effect.
Fundamentals of hydrostatics and hydrodynamics. Pressure, barometric formula. Pascal's principle and Archimedes' principle. Hydrodynamics - basic concepts (Bernoulli's principle, stream continuity equation, viscosity).
Kinetic theory of gases and foundations of thermodynamics. Laws of thermodynamics. Internal energy and entropy. Equation of state of ideal and real gas, Maxwell distribution. Gas processes. Specific and molar heat, principle of equipartition of energy.","The aim of the subject is to develop the ability to describe the surrounding physical reality using basic laws and principles. The student acquires the ability to understand physical interactions and phenomena and their importance in nature and technology, is able to solve simple calculation tasks and is prepared to take on more complex technical problems based on the laws of physics.",Polish
9,Probability and Statistics,2,Lack,4.0,"basic knowledge of probability and statistics; probabilistic models and their scope of applicability; analyze data using probabilistic methods; describe, formulate and solve practical problems in the field of statistical inference and analysis; recognize the role of statistics in contemporary society","Introduction to the subject, probability theory and statistics. Preliminary data analysis. Descriptive statistics. Evaluation of measurement results, transformations of variables, Exploratory analysis of large amounts of data. Data visualization. Fundamentals of probability theory. Conditional probability and Bayes' rule. Random events and event probabilities. One-dimensional random variables: distributions and parameters. Normal distribution, its properties and applications. Bidimensional and multidimensional random variables. Marginal distributions. Probabilistic models. Fundamentals of statistics and statistical inference. Methods of random sample selection. Statistical inference. Point and interval estimation. Testing of statistical hypotheses. Nonparametric tests, rank methods. Analysis of variance. Multivariate methods of mathematical statistics. Discriminant analysis. Reduction of the dimensionality of description. Data grouping. Methods of modern statistics. Monte Carlo methods. Random number generators. Bootstrap methods.
Exercises in line with the lecture content","Preliminary data analysis, descriptive statistics, evaluation of measurement results, transformations of variables, exploratory analysis of large amounts of data. data visualization. Fundamentals of probability theory, conditional probability and Bayes' rule, random events and event probabilities, univariate random variables: distributions and parameters, basics of statistics and statistical inference, statistical inference. Monte Carlo methods, bootstrap methods.",Polish
10,Discrete mathematics,2,Functions and relationships.,3.0,The student knows and understands the basic issues of discrete mathematics.; The student is able to solve and algorithmize basic problems related to discrete mathematics.; The student is able to perform basic calculations using discrete mathematics techniques.; The student is ready to promote knowledge about discrete aspects of mathematics in society.,"Basics of logic, relations, functions.
Elements of graph theory.
Elements of combinatorics.
Finite algebraic structures.
Recurrence equations.","1. Preliminaries - elements of logic - classical propositional calculus and quantifier calculus, relations, including equivalence relations, order relations, functions. 2. Elements of graph theory. 3. Elements of combinatorics. 4. Finite algebraic structures. 5. Recurrence equations.",Polish
11,Graph theory,2,,2.0,"The student knows the concept of a directed and undirected graph, a tree, a weighted graph; The student knows the concept of a (minimal) path, a cycle in a graph; The student knows the basic graph algorithms: finding a spanning tree, testing connectivity, searching for shortest paths, etc.; The student knows the applications of graph theory in modeling phenomena and formalizing problems; The student knows the limitations related to the use of graph representations, related to computational complexity; The student is able to describe selected computer/physical systems using directed and undirected graphs; The student is able to estimate the computational complexity of algorithms operating on graph structures; The student is able to decide on the existence/non-existence of Hamiltonian/Euler paths and cycles; The student is able to indicate practical applications of graphs/trees in computer science problems; The student is ready to independently search for solutions to encountered problems in the field of formalization of technical problems","1. Graphs and subgraphs. Basic concepts. Isomorphism of graphs. Adjacency and incidence matrices. Paths and cycles 2. Trees. Cayley's theorem 3. Connectivity of graphs. Connected components. Spanning tree of a graph. 4. Hamiltonian graphs. Hamiltonian cycles and paths 5. Eulerian graphs. Eulerian cycles and paths 6. Matchings. Matchings and coverings in bipartite graphs. Perfect matching. 7. Vertex and edge coloring. Brooks' theorem, Vizing's theorem 8. Independent sets and cliques. Ramsey's theorem, Turan's theorem 9. Planar graphs. Dual graphs. Euler's formula, Kuratowski's theorem 10. Directed graphs. 11. Networks. Flows. Cuts. Maximum flow theorem.","1. Graphs and subgraphs. Basic concepts. Isomorphism of graphs. Adjacency and incidence matrices. Paths and cycles 2. Trees. Cayley's theorem 3. Connectivity of graphs. Connected components. Spanning tree of a graph. 4. Hamiltonian graphs. Hamiltonian cycles and paths 5. Eulerian graphs. Eulerian cycles and paths 6. Matchings. Matchings and coverings in bipartite graphs. Perfect matching. 7. Vertex and edge coloring. Brooks' theorem, Vizing's theorem 8. Independent sets and cliques. Ramsey's theorem, Turan's theorem 9. Planar graphs. Dual graphs. Euler's formula, Kuratowski's theorem 10. Directed graphs. 11. Networks. Flows. Cuts. Maximum flow theorem.",Polish
12,Programming Basics 2,2,"The student knows the syntax and semantics of the C language: declarations of variables of different types, the syntax of definitions and function calls, the course of compilation and linking of the program, basic libraries of the C language. The student is able to: write and compile a program in the C language, using one of the IDEs, remove compilation and linking errors, implement functions, declare variables and structural types, use pointers.",4.0,"Knows and understands the basic features of object-oriented programming languages ​​and is able to indicate their implementation in C++.; Knows the syntax of the language: the way of defining classes, attributes, methods, the principles of overloading functions and operators, understands the concept of virtual functions.; Knows and understands the construction patterns of containers and iterators.; Knows and understands the construction patterns of containers and iterators.; Is able to correctly implement a class with a fixed interface and scope of responsibility by designing additional data structures and/or using ready-made components, e.g.: C++ standard library templates; Is able to correctly implement a class with a fixed interface and scope of responsibility by designing additional data structures and/or using ready-made components, e.g.: C++ standard library templates.; Is able to implement their own memory-allocating containers (string, list, vector) both as classes and as templates. Is able to construct iterators for them; Is able to implement container content copying operations (assignment operator and copy constructor), including using the RTTI mechanism.; Is able to practically apply the exception mechanism; The student is ready to solve problems by obtaining information from Internet resources and literature.","Lectures Introduction to object-oriented programming languages. Basic relations between classes in object-oriented programming languages. Association, aggregation, composition, inheritance, multiple inheritance. Examples in C++. Class members (attributes, methods, constructors, destructors). Rules for placing class declarations and definitions in the source code. Syntax for calling class methods. References. Class methods. The this pointer. Inline functions. Static methods and variables. Inner classes, internal types and enumerations. (2 hrs.) Composition and inheritance. Syntax of composition and inheritance. Initialization of attributes and objects of base classes. Access specification. Multiple inheritance, virtual inheritance. Virtual functions. Implementation of virtual functions. Examples. Pure virtual functions, abstract classes. Interface specification. Constructors and destructors. Order of calling constructors and destructors. Use of virtual functions in constructors and destructors. Virtual destructors. Overloading functions and operators. Standard arguments. Overloading operators in the example of the String class. Assignment operator. Assignment operators and copy constructors for classes allocating memory. Member access operator. Casting operators in C++. RTTI, dynamic_cast and typeid operators. Exception mechanism. Generation and catching. Grouping exceptions. Exceptions in constructors. Exception specification. (2 hrs.) Containers. Examples of containers. Problems of reusing containers. Iterators. Assignment operator and copy constructor for containers. Container specialization, containers storing objects of different types, cloning. Templates. Function templates, comparison with preprocessor macros. Class templates. Template inheritance, adaptation of template code. C++ Standard Library. Introduction and examples: string, list, vector, stack, dictionary, set. Algorithms and function objects. Input-output library.
Laboratory exercises Declaring simple classes. Implementing examples of composition and inheritance. Tasks using virtual functions. Operator overloading on examples of string, vector, matrix classes. Implementing list type containers. Implementing iterators. Implementing tasks using object containers. Using RTTI to implement copy constructors and assignment operators in object containers. Implementing containers in the form of templates. Implementing tasks using templates of the C++ standard library (string, vector, list, map, etc.). Implementing tasks in which pointers are stored in containers.","The course will systematically discuss the elements of the C++ language and present the object-oriented programming paradigm. The course will cover the declaration of classes and their members, composition and inheritance relations, function and operator overloading, container implementation, C++ templates, and selected elements of the C++ standard library.",Polish
13,Algorithms and data structures,2,"Introductory knowledge of mathematics (logic, set theory, matrices, graphs, logarithms, etc.)",4.0,The student knows and understands basic algorithms and data structures; The student is able to and understands the issues of estimating the computational complexity of algorithms; The student is able to use basic algorithms and data structures and solve simple algorithmic problems; Is able to analyze and algorithmize selected problems; The student is ready to promote and disseminate knowledge about algorithms and data structures in society,"Algorithm - basic concepts, algorithms and structures The concept of an algorithm, criteria for analyzing algorithms, correctness. Strategies for constructing algorithms, divide and conquer method, dynamic programming, greedy method, heuristics, other methods. Elementary data structures: arrays, lists and their variants, queues, stacks, others. Basic algorithms: binary search, Hoare selection, magic fives, others.
Introduction to computational complexity. Time and memory complexity, basic definitions, notations and concepts. Complexity classes of algorithms. Computational hard problems: NP-completeness, undecidability.
Sorting Internal sorting, basic classifications and problems. Simple algorithms, special and linear algorithms, Shell's algorithm. Quicksort algorithms: QuickSort and its analysis, merge sort, introspective sort, others. Heaps, heap sort, priority queues. External sorting methods. Hashing Hash tables, various hashing methods and algorithms, applications. Tree structures Trees and basic tree operations, search methods, tree balancing problem. Binary trees, AVL trees, BST trees, red-black trees, splay trees, other trees. Dictionary trees and operations, B-trees, 2-3 trees. Complex data structures Binomial heaps, Fibonacci heaps, data structures for disjoint sets.
Graph Algorithms BFS and DFS search algorithms, properties, applications. Overview of graph algorithms, minimum spanning trees, shortest paths, graph coloring, others. Text Algorithms Pattern searching, prefix-suffix, Knuth-Morris-Pratt algorithm, Boyer-Moore algorithm, Rabin-Karp algorithm, text data structures, other text algorithms.","* Introduction to Algorithms * Introduction to Computational Complexity * Sorting * Hashing * Tree Structures * Complex Data Structures * Binomial Heaps, Fibonacci Heaps, Data Structures for Disjoint Sets * Graph Algorithms * Text Algorithms",Polish
14,Basics of computer graphics,2,,4.0,knows the main areas of computer graphics applications; knows the mathematical foundations of 2D and 3D graphics; knows the basic algorithms and computational methods of modern computer graphics; is able to operate 3D graphics packages at a basic level; is able to use basic algorithms and computational methods of modern computer graphics; is able to create animated 3D graphics at a basic level; is ready to work in a team to create a group project; is aware of the responsibility for his/her own work.,"The lecture topics and classes are held remotely on the MS Teams platform and aim to introduce the audience to the basic issues of 2D and 3D computer graphics. General issues such as various applications of computer graphics and classifications of computer graphics will be discussed, along with a discussion of programs and an overview of systems used in various fields using computer graphics. In the field of 2D graphics, the division and differences between raster and vector graphics will be discussed, with particular emphasis on the differences in the way information is represented in raster and vector graphics. The next issue will be a discussion of various models of color representation in computer graphics (RGB, CMYK, HSL, HSV, Lab, YCbCr models) and their usefulness in various applications of computer graphics. The next topic will be a general discussion of the most popular coding formats and compression methods for raster graphics, with particular emphasis on lossless compression methods, including RLE, LZW algorithms, and lossy on the example of JPEG coding. The basic issues of saving graphic files such as color palettes, bitmaps, image interlacing and the most popular graphic file formats such as BMP, PCX, GIF, PNG, JPEG, TIFF will be discussed. The next issue will be a discussion of issues related to digital processing of raster images, such as arithmetic operations, histogram and simple filtering of bitmap images. In the part concerning 3D graphics, the classes will familiarize with the mathematical foundations of 3D vector graphics. The issues discussed will include the basics of describing and transforming vector objects in 3D space. The issue of modeling a virtual 3D scene, types of scene lighting, mapping and texturing methods (semi-transparency, bump mapping) will be discussed. The basics of generating photo realistic images will be discussed - rendering and sample lighting models including the Phong lighting model and various shading models (flat shading, Gouraud shading, Phong shading) and rastering of the generated 3D scene. The next topic to be discussed will be the discussion of two global rendering methods - ray tracing and energy balance (radiosity) methods. Finally, the theoretical foundations of the process of creating computer 3D animations and the stages of creating 3D animations and the basics of the OpenGL library will be discussed. The overall process of creating 3D animations will be discussed
Laboratory topics (remote classes, MS Teams platform): As part of laboratory exercises, students complete a series of practical exercises familiarizing them with the basics of using various types of software for processing various types of graphics. Among other things, they will become familiar with the use of tools for designing and processing vector graphics and will familiarize themselves with the basics of using the most important systems for creating 3D graphics. As part of the laboratory, students will complete an independent group project, which is a 3D animation.","Learning basic techniques in computer graphics and selected graphic systems. The subject is intended to teach the student the basics of creating graphics. After completing the subject, the student should independently create an animation of medium complexity. Introduction to basic issues in the field of computer graphics.",Polish
15,Introduction to Intelligent Systems,2,Lack,2.0,concepts of intelligent systems; concepts related to automatic logical reasoning; basics of machine learning; principles of operation of neural networks and deep learning; basics of multi-agent systems; basic concepts of game theory; explanations of the current state of advancement of intelligent systems and directions of development of artificial intelligence,"Introduction to intelligent systems.
Automatic inference
Machine learning
Neural networks and deep learning
Multi-agent systems
Elements of game theory",Introduction to Intelligent Systems. Automatic Reasoning. Machine Learning. Neural Networks and Deep Learning. Multi-Agent Systems. Elements of Game Theory,Polish
16,Operational research,2,"Mathematics - matrix calculus, elements of discrete mathematics, elements of mathematical analysis",2.0,selected operational research problems and methods for solving them; model and solve selected optimization problems; formulate a mathematical model of transportation and allocation problems; analyze complex projects using network programming methods; interpret the results of a mathematical model in relation to a practical problem; help in solving real economic or business problems by interpreting them as special cases of generic operational research problems that can be analyzed,"Introduction to Operational Research, historical outline, scope of the discipline, connections between Operational Research and other fields
Linear programming. Solving problems using the graphical method and the simplex method
Dual problems
The issue of allocation
Network programming
Ranking theory
Integer programming","Introduction to Operations Research, Linear Programming, Sensitivity Analysis, Integer Programming, Transportation Problem, Assignment Problem, Nonlinear Programming, Game Theory Elements",Polish
17,Physics 2,3,,4.0,"issues of: electromagnetism, Maxwell's equations, electromagnetic waves, optics, interaction of radiation with matter and the basics of quantum mechanics and solid state physics, necessary to understand basic physical phenomena in nature and technology, and in particular in information technologies (systems for storing, processing and transmitting information).; the importance of physics as a natural science, its place and role in today's science and technology, especially the importance of solid state physics for applications in information technologies, notices the mutual relations between theory and experiment.; current knowledge in the field of modern physics, the current state of research (monitors the development of physics).; analyse measurement results, taking into account the uncertainty of results, as well as prepare reports; use in practice the issues of: electromagnetism, Maxwell's equations, electromagnetic waves, optics, interaction of radiation with matter and the basics of quantum mechanics and solid state physics, necessary to understand basic physical phenomena in nature and technology, and in particular in information technologies (systems for storing, processing and transmitting information).; operation of modern measuring devices and is able to design new experiments based on the principles learned; basics of planning and carrying out measurements of physical quantities; recognizing the need to develop practical skills in describing physical phenomena; to use the acquired knowledge in the field of electromagnetism, modern physics and solid state in practice, among others in information technology; to cooperate in performing laboratory tasks and take joint responsibility for developing and presenting the results of their work.","Electrostatics. Basic concepts: field, potential, potential energy, flux. Electric dipole. Examples of Gauss's law (linear, surface volumetric charge distribution). Capacitors, electric field energy. E. Dielectrics, piezoelectricity.
Direct current. Current and Ohm's law. EMF - electromotive force and internal resistance. Electrical conductivity in metals and semiconductors. Kirchoff's laws. RC and RLC circuit.
Magnetic field. Induction vector B, Lorentz force, electrodynamic force. Examples: Hall effect, e/m, cyclotron, mass spectrometer. Ampere's law, Biot-Savart's law, examples of calculating the magnetic field, Faraday's law and Lenz's rule. Inductance and self-induction. RL circuit, B-field energy, magnetism of matter and its applications.
Maxwell's equations and electromagnetic waves. Divergence and rotation operators, application examples. Stokes' theorem. Magnetism of matter, displacement current, Induced B and E fields. Wave equation. Energy of an electromagnetic wave, Poyting vector. Spectrum of an electromagnetic wave.
Geometrical and wave optics. Fermat's principle, laws and phenomena of geometrical optics, wave optics - interference, diffraction (1 and 2 slits), diffraction grating. X-ray radiation, X-ray diffraction (Bragg's law). Polarization, birefringence. Speed ​​of light.
Theory of relativity. Lorentz transformation, length contraction, time dilation. Velocity in inertial frames. Relativistic mass and energy.
Particle-wave phenomena, atom. Thermal radiation, photoelectric effect, Compton effect. Bohr's model of the atom.
Matter waves, Schroedinger equation. De Broglie hypothesis, Heisenberg uncertainty principle. Time-dependent and time-independent Schroedinger equation, wave function and its properties.
Atomic physics. Excited energy state of the atom. Discrete atomic spectrum (spontaneous, stimulated, resonant emission). Anti-Boltzmann population distribution, gas lasers (electron pumping), ruby ​​laser (optical pumping).
Elements of solid state physics. Types of atomic bonds. Electron in a periodic lattice, effective mass. Intrinsic and impurity semiconductors, temperature dependence of conductivity. Physics of basic elements of micro- and nanoelectronics. Superconductors.",Theoretical and experimentally acquired knowledge in the field of classical physics and contemporary physics allows one to learn and understand the principles of describing physical quantities and phenomena.,Polish
18,Elements of modern physics,3,"Knowledge of classical physics, mathematical analysis and basic probability theory",3.0,"basic issues of modern physics; perform simple experiments in the field of modern physics, analyze experimental data and draw conclusions on their basis; obtain information from the Internet and professional literature in order to understand selected issues in the field of modern physics; cooperate with other students in order to jointly solve an experimental problem in the field of modern physics; expand their knowledge in the field of modern physics.","Elements of quantum mechanics: wave-particle duality, de Broglie wave, Bohr model, quantum nature of radiation.
Elements of quantum mechanics: Schrödinger's equation, wave function and its interpretation, Heisenberg's uncertainty principle.
Elements of atomic physics: hydrogen atom, Zeeman effect, electron spin, Pauli exclusion principle, multi-electron atoms, periodic table of elements.
Lasers.
Elements of condensed matter physics: chemical bonds, crystal structure of solids, semiconductors, insulators, superconductors.
Elements of nuclear physics: radioactive decays, fission reactions, fusion reactions, interaction of nuclear radiation with matter, nuclear reactors, nuclear fusion in stars
Elements of cosmology.
Laboratory exercises covering selected aspects of condensed matter physics and atomic physics.","1. Elements of quantum mechanics: wave-particle duality, de Broglie wave, Bohr's model, quantum nature of radiation. 2. Elements of quantum mechanics: Schrödinger's equation, wave function and its interpretation, Heisenberg's uncertainty principle. 3. Elements of atomic physics: hydrogen atom, Zeeman effect, electron spin, Pauli's exclusion principle, multi-electron atoms, periodic table of elements. 4. Lasers. 5. Elements of condensed matter physics: chemical bonds, crystalline structure of solids, semiconductors, insulators, superconductors. 6. Elements of nuclear physics: radioactive decays, fission reactions, fusion reactions, interaction of nuclear radiation with matter, nuclear reactors, nuclear fusion in stars 7. Elements of cosmology.",Polish
19,Advanced programming 1,3,Knowledge of the basic concepts of the object-oriented paradigm. Knowledge of programming basics.,5.0,"Knows and understands the basic features of object-oriented programming languages ​​and is able to indicate their implementation in Java.; Knows the syntax of the language, including: rules for declaring classes, interfaces, methods, inner and nested classes, exception handling, inheritance mechanisms, basic language API; Understands the semantic model of the language, including: memory management, implementation of polymorphism, use of immutable objects, associations of inner and outer classes.; Knows and understands concurrency mechanisms in Java.; Knows the basic components of Java API, including implemented containers (including generic ones); Is able to design, implement and manage the process of building a Java program based on external libraries, logically distributing code between classes and interfaces.; When solving a programming problem, is able to select and properly use elements of Java API libraries. Is able to use concurrency mechanisms in the program. Is able to implement a program with a graphical user interface.","Introduction. Java platform and its elements. Compilation and execution of Java programs.
Java program building tool: Maven
Objects and references. Data types. Unicode platform. Syntax of control statements and expressions. Class declaration. Packages. Member fields and methods. Access modifiers. Static fields and their initialization. Methods and their modifiers appearing in their declarations. Arrays and containers in Java. Constructors. Cloning. Deleting objects. Interfaces. Implementing interfaces. Constants and inner types. Inner classes and nested classes. Exceptions, exception hierarchy. Checked and unchecked exceptions. Exception chains. Finally block. Annotations. Generic types. Principle of container construction. Reflection mechanism.
Concurrent programming mechanisms in Java. Threads and their implementation problems. Thread state diagram. Thread management functions. Daemon threads. Implementation of concurrent programming patterns. Mutual exclusion and synchronous methods. Monitor construction. Thread synchronization using wait and notify methods. Elements of the java.util.concurrent package.
Programming graphical interfaces in Java (including web applications based on JSF or similar technology).
Creating Programs: Declaring Classes. Implementing Composition and Inheritance Examples. Using Interfaces. Managing the Application Build Process
Using input output libraries
Tasks using concurrency. Examples of producer and consumer, readers and writers patterns. Application of selected mechanisms of the java.util.concurrent package.
Programming applications with GUI.",Can create complex programs using the object-oriented paradigm in Java,Polish
20,Numerical methods,3,Basic skills and knowledge of mathematical subjects and programming skills are required.,4.0,The student knows and understands where numerical errors come from; The student knows basic numerical algorithms; The student is able to implement basic numerical algorithms independently; The student is ready to develop knowledge and competences in the field of numerical methods,"Basic concepts and information about numerical computations Sources of errors in numerical computations, floating-point representation of numbers, interval arithmetic, conditioning of a numerical problem and methods of its evaluation, numerical stability of algorithms, basics of differential analysis of algorithm errors, numerical correctness of algorithms.
Solving nonlinear equations of one variable. Characteristics of iterative methods, convergence, convergence exponent of iterative sequence, method of iteration of straight line, bisection, Newton, secant and their modifications, convergence acceleration algorithm, Steffensen algorithm, Brent-Dekker algorithm. Homotopy functions and continuation methods.
Solving Systems of Linear Equations Direct Methods - Gaussian Elimination Method, LU Decomposition. Iterative Methods - Jacobi, Gauss-Seidel, Relaxation. Eigenproblem - Power Method, QR Decomposition. SVD Decomposition.
Interpolation methods Polynomial interpolation (Lagrange form of interpolation polynomial, Newton form of interpolation polynomial, interpolation error, Runge effect, Hermite interpolation, and estimation of its error, Chebyshev interpolation), spline interpolation with error estimation. Shape preserving interpolation - PCHIP.
Numerical differentiation and integration Real and complex difference quotients, dual numbers, automatic differentiation. The concept of linear quadrature, Newton-Cotes quadratures (simple and complex), order of quadrature, errors, convergence of a sequence of quadratures, acceleration of convergence, extrapolation methods - Romberg's method. Gaussian quadratures. Constant-step and adaptive algorithms.
Initial value problem of differential equations. Local and global error. Linear multistep methods, explicit and implicit Runge-Kutta methods, stability regions, constant-step and adaptive algorithms.
Outline of static optimization algorithms. Gradientless methods - Nelder-Mead, gradient methods - minimization in the direction and choice of the direction, methods of steepest descent, conjugate gradient, Newton, trust-region.
Approximation Mean square approximation, parametric (linear and nonlinear) and nonparametric (LOWESS) regression, spline approximation, multivariable approximation.
Solving systems of nonlinear equations, fixed point method, Newton, Jacobi matrix. Introduction to the boundary value problem of differential equations.","Basic concepts and information about numerical calculations, Interpolation methods, Numerical integration, Solving nonlinear equations, Solving systems of linear equations.",Polish
21,Fundamentals of artificial intelligence,3,"1. Good knowledge of English. 2. Good knowledge of the basics of logic, algebra and graph theory. 3. Knowledge of logical/declarative programming, knowledge of Python, basics of programming, Linux. 4. Enthusiasm, perseverance and zeal and the ability to STUDY. 5. Ability to study materials independently and analyze them critically. 6. Ability to take notes during the lecture. The lecturer does not consent to any form of electronic recording (audio or video).",3.0,"Theory, models, methods and classification of Artificial Intelligence (AI) issues; Algorithms and tools and how to use them for AI purposes; Design, build and analyze models of AI systems and use programming tools.; Is able to present and discuss various aspects of AI, in the context of the impact on the economy, society, science, development - as well as in the context of the philosophy of existence, consciousness, will, faith and reason.","Introduction: history, systems, methods, application areas. Definitions of AI. Architectures of intelligent systems. Knowledge base systems (KBS). The concept of an intelligent agent. Methods of representing and processing symbolic knowledge. Logic in AI. Problem examples. Classification of models, methods and tools. State space search algorithms. Heuristic search methods. Prolog and logic programming as AI tools. Constraint programming. Rule, expert and business rule systems. Decision support systems. Representation of uncertain and incomplete knowledge. Probabilistic methods. Bayesian rule and networks. Planning. Automatic generation of plans. Teacher-guided and unsupervised machine learning. Computational intelligence: neural networks, genetic algorithms and other biology-inspired methods. The concept of semantic network and ontology. Other selected AI topics. Summary. Development directions.","Classification of problems and areas of application and methods of representing and processing knowledge, especially symbolic knowledge, for the needs of Artificial Intelligence.",Polish
22,Databases,3,Knowledge of discrete mathematics in the field of set algebra and relational algebra. Basic knowledge of logic. Knowledge of operating systems and basic use of computers. Knowledge of English at a level that allows studying professional literature.,4.0,basic concepts and notions of relational databases; basics of the relational data model; basic SQL language constructs; basic principles of database design; operate the conceptual apparatus of databases; use the SQL language at a basic level; design and implement a simple database; use and popularize the acquired knowledge about databases in the enterprise and society,"Introduction to relational databases: basic relational database concepts, database management system, client-server architecture, PostgreSQL.
Query definition language: attributes, domain types, PostgreSQL data types, projection and selection, query merging, joins, aggregate functions, group by and having clauses, subqueries. Data manipulation: insert, update, delete statements.
Database design: entity-relationship model, logical data model, physical relationship design, lossy and lossless decomposition, functional dependencies, keys, normal forms, normalization algorithms.
Language for defining data structures: creating and modifying tables, creating new data types, sequences, views.
PL/pgSQL language, triggers and triggered procedures.
Transactions. User and permission management.","Introduction to relational databases, Query definition language, Database design, Data structure definition language, SQL, Data processing, Transactions.",Polish
23,Formal linguistics and automata,3,"General knowledge of programming languages ​​provided in the study program, cursory knowledge of the compilation/translation process. Knowledge of basic concepts in mathematics and algorithms (logic, set theory, relations, computational complexity)",3.0,"Knows and understands the basic concepts related to formal languages; Knows and understands the concept of grammar, grammatical parsing, knows and understands the meaning of Chomsky's classification of languages; Knows and understands the concept of a finite automaton and a regular expression and the basic algorithms and transformations related to them; Knows and understands the principles and algorithms of automaton optimization; Knows and understands the basic parsing methods; Can define formal languages ​​using the concept of grammar, automaton and regular expression; Can perform syntactic analysis for defined formal languages; Can perform basic transformations in the area of ​​grammars, finite automata and regular expressions; Can perform optimization of a finite automaton; Knows the importance of formal and natural languages ​​in contemporary reality","Basic concepts, division of languages, components of language, language and metalanguage, basic methods of defining languages. The concept of generative grammar, language generated by grammar, basic operations on languages, Chomsky classification. Grammatical parsing, the problem of recurrence, the problem of uniqueness of grammar. Deterministic and nondeterministic automaton, languages ​​accepted by automata, basic operations and properties, determinization of automaton, epsilon-transitions. Regular languages ​​and their properties, automata and grammars. Rabin-Scott, Moore, Mealy automata. Pumping lemma for regular languages, Myhill-Nerode theorem. Closure properties and decision problems for regular languages. The problem of minimizing a finite automaton - algorithms and examples. Definition of a regular expression, laws and properties for regular expressions, transformations between automata and regular expressions. Applications of regular expressions. Pushdown automata and context-free languages. Meaning and examples of context-free languages. Acceptance of an automaton, pushdown automata and context-free grammars, equivalence problem. Normal forms of context-free grammars, Chomsky-Greibach form, pumping lemma for context-free languages, closure properties and decision problems for context-free languages. Linear-bounded automata, Turing machine and its variants, context-sensitive languages, properties. Introduction to parsing. Nondirected methods: Cocke-Younger-Kasami algorithm. Directional methods: Earley algorithm. Languages ​​and automata and computational complexity. Deterministic and nondeterministic Turing machines. Recursive and recursively enumerable languages, Church's thesis, undecidable problems.
The course includes auditorium exercises. The content of these classes consolidates the knowledge provided during lectures. The aim of the classes is to acquire practical skills in the design of formal grammars, syntactic verification of defined languages, transformations within grammars, automata and regular expressions, transformation of grammars and optimization of automata, basic parsing methods","Basic Concepts The concept of generative grammar, language generated by a grammar, basic operations on languages, Chomsky classification. Grammar parsing, the problem of backtracking, the problem of uniqueness of grammars. Deterministic and nondeterministic automata, Pumping lemma for regular languages, Myhill-Nerode theorem. Definition of a regular expression, Applications of regular expressions. Pushdown automata and context-free languages, Chomsky and Greibach form, properties and problems for context-free languages. Linear-bounded automata, Turing machine and Introduction to parsing. Languages ​​and automata and computational complexity.",Polish
24,Software Engineering,3,Knowledge of programming processes and paradigms acquired during studies,4.0,Knows and understands the basic concepts and issues related to software engineering; Knows and understands the tools of structured analysis; Knows and understands the processes of modeling system use cases; Is able to analyze a selected issue using the structured method; Is able to analyze a selected system using UML use cases and their scenarios; Knows the importance of software engineering in today's reality,"Introduction to software engineering. Basic concepts and issues, review of issues. IT project pages. Forward engineering, reverse engineering. Structured analysis and design. The importance of the analysis phase in an IT project. Structured approach: data flow model, data model, dynamics model. Structured design. Analysis of real-time systems. Introduction to UML. Modeling system functionality. Formalization of use cases, system scenarios, effective scenario writing. Class and object models. Software life cycle models. Agile methodologies for IT projects, extreme programming. Classical requirements engineering, requirements life cycle, system context in requirements engineering. Stakeholders, system viewpoints. Requirements classification, requirements elicitation, requirements analysis, CRUD, requirements inspection, requirements specification and management, CMMI and good practices. Basic types of IT system architecture. Architecture design (models, styles, patterns and architectural views, 4C approach), The role of interfaces in systems. The quality aspect of architecture selection. Principles and practices of code design and implementation. Code smells. Refactoring. SOLID, GRASP, DRY, KISS principles and others. Introduction to testing, tests and requirements set.
The aim of the exercises is to build analytical models including a structural approach and UML use cases including, among others, sample elements of requirements engineering such as stakeholder identification, requirements elicitation. On this basis, a system model is created: the functional scope is defined, the domain model. Identification of key functionalities. The domain area of ​​the project may include different areas.","Introduction to software engineering. Structured analysis and design. Structured design. Analysis of real-time systems. Introduction to UML. Software life cycle models. Agile methods for IT projects, extreme programming. Classical requirements engineering, requirements life cycle, system context in requirements engineering. Basic types of IT system architecture. Principles and practices of code design and implementation.",Polish
25,Advanced programming 2,4,"Working knowledge of object-oriented programming (C++, Java) is required.",4.0,"the structure of the .NET platform, the syntax of the C# language and the basic programming concepts contained therein, and knows how the runtime environment functions and what compilation to bytecode (managed) involves.; the assumptions of the programming paradigms: object-oriented, generalized, component-based, dynamic, multithreaded, and knows how to implement them in the C# language, and what are the differences in the above issues in relation to the C++ and Java languages.; existing database access patterns: Active Record, DAO, etc., with particular emphasis on the Entity Framework technology; the functional and reactive programming paradigm - what it is, what distinguishes it.; using popular programming environments (Visual Studio/Visual Studio Code), create applications using the C# language, the .NET platform, and the programming paradigms offered by this technology.; independently search for detailed information in the available C# documentation resources.",".NET Framework. What is the .NET platform, what is the C# programming language? .NET Core Library. Work Environment (Visual Studio, Visual Studio Code).
Elements of the C# language: base types, classes, structures, interfaces, delegates, value brackets, generic types, anonymous methods, iterators, LINQ, asynchronous programming, unsupervised code Delegates. Events. Lambda Expressions
Cooperation with the database using EntityFramework - using the CodeFirst and DataFirst approaches
The concept of streams in programming - reactive streams Learning the Rx library family... from a practical perspective - exercises with streams, operators and subjects (types subjects etc.) The Rx.NET library as an example of an asynchronous and event-based programming library
Selected .NET libraries (WPF, UWP) and C# language applications (Unity).",".NET Framework. What is the .NET platform, what is the C# programming language? .NET Core Library. Work environment (Visual Studio, Visual Studio Code). C# language elements: Delegates. Events. Lambda expressions Cooperation with the database using EntityFramework The concept of streams in programming Rx.NET Library Selected .NET libraries (WPF, UWP)",Polish
26,Computer networks,4,No prerequisites,4.0,"Has extensive knowledge of technologies and solutions used in the construction of computer networks.; Has extensive knowledge of the theoretical foundations of computer networks, including communication protocols and technologies enabling devices to communicate.; Has knowledge of the use of network technologies and services in various IT systems.; Is able to build and configure computer network installations.; Is able to manage the infrastructure of computer networks, including configuring specialized devices supporting network communication.; Is able to design and build new solutions within network technologies.","Basic issues related to computer networks Definitions related to computer networks. Principles and modes of data transfer in computer networks. Layered network architectures: ISO-OSI model and other models, types of physical and logical topologies of computer networks, classifications of computer networks, organizations that standardize the development of computer networks. Transmissions in computer networks: Signal transmission - popular types of wired and wireless transmission media, creation of transmission networks, computer network topologies, physical devices in computer networks (bridges, switches, routers, concentrators, switchboards, gateways, hubs, etc.), narrowband and broadband transmissions, data coding techniques in the transmission medium.
Wired LAN, SAN, MAN and Data Link Layer Theoretical basics of Ethernet operation and the IEEE 802.3 standard (assumptions regarding this standard, types of physical media used, CSMA/CD, additional mechanisms: NLP/FLP, Auto-MDIX), MAC addressing, link access and collision detection, characteristics of Fast, Gigabit, 10Gigabit , 40Gigabit , 100Gigabit Ethernet, VLAN (IEEE 802.1Q), Stacked VLAN Q-in-Q (IEEE 802.1ad), VQP protocol and use of VLAN Membership Policy Servers), Cisco VTP and VTP Pruning, Private VLANS (Private, Isolated, Community VLANS), QoS (IEEE 802.1p and specifying CoS in IEEE 802.1Q), configuring managed Ethernet switches, STP protocol (IEEE 802.1d), configuring IP addressing, ARP protocol, local network diagnostics. Ethernet switch architectures of the CORE segment: switches with Supervisor modules, architectures based on Switch Fabric, internal system buses of switches - channel management and use in configuring modules, routing modules in switches, IDS (Intrusion Detection System) and NAM (Network Analysis Module) modules. Types of SAN network topologies, Fibre Channel technology (FC layers, devices, types of ports and frames, WWNN/WWPN addressing, zoning, Fibre Channel tunneling over other technologies). Overview of technologies used in wired LANs: Ethernet, Token Ring (principles of network operation in a logical topology based on token passing, types of physical media used, Token Ring frames, MAU switch operation), FDDI/CDDI (principles of operation of a double-ring topology, FDDI concentrators, bypass switch, types of physical media used, SAS and DAS interfaces, token generation and recovery procedures, FDDI frames), use of LLC and SNAP protocols in LANs and MANs.
Internet and Internet protocols Internet network architecture, Internet segmentation principles and addressing systems used in the Internet. IP protocol version 4 (basic protocol properties, IP datagram structure, datagram features enabling IP routing, IP packet fragmentation and defragmentation, IP encapsulation), ARP protocol (operation principle, ARP packet format, MAC and IP address binding tables in devices, Inverse ARP and Reverse ARP, Proxy ARP), ICMP protocol (ICMP message types, message format, situations supported by ICMP, IP network diagnostics using ICMP). IPv6 protocol (address components, EUI-64 notation, IPv6 multicast, routing using IPv6, dynamic routing protocols for IPv6 (RIPng, OSPF3, EIGRP), IPv6 tunneling in IPv4 networks. TCP protocol (operation principles, TCP connections and associations, flow control and TCP stream defragmentation, addressing and TCP packet structure, processing sequence numbers and acknowledgments in TCP, TCP connection life cycle), UDP protocol (operation principles, addressing in UDP, UDP associations, UDP packet structure), IPX (operation principles, addressing used in IPX, cooperation in NetBEUI, Sequenced Packet Exchange/SPX protocol), RTP protocol (operation principles, RTP packet structure, RTCP protocol, meaning of timestamps and sequence numbers, synchronization sources for data and their identification). Multicast transmissions in IP networks (addressing datagrams in multicast and values special addresses, Reverse path forwarding, IGMP for IPv4 and MLD for IPv6 protocols and their versions, managing multicast groups, IGMP Querier and its operation, IP Multicast and MAC address mapping, IGMP Snooping in Ethernet switches, routing multicast datagrams and the PIM protocol, acquiring multicast routes - DVMRP, MOSPF, MBGP protocols, configuring PIM Dense Mode, PIM Sparse Mode and PIM Sparse-Dense Mode, the importance of the Rendezvous Point and Mapping Agent units, tunneling multicast traffic over IP - an example of the mBone network).
IP Routing Basics Router operating systems - configuration basics using examples of popular modular routers on the market (Cisco, Juniper, Helwett Packard, Allied Telesis). Configuring IP interfaces of routers, control lists (ACL), serial link protocols (SLIP, PPP, HDLC), DHCP, network management using the SNMP protocol. Datagram routing in IP networks, IP classful and CIDR routing, routing tables (administrative distance, longest prefix match, route summarization, rule of last resort), defining static routing rules, routing between VLANs, dynamic routing protocols of the interior type: RIP (RIPv2 and VLSM), IGRP, EIGRP, OSPF prophecy (backbone area, ABR and ASBR routers, calculating metric values, LSA messages, Stub area, NSSArea, Totally stubby area, Virtual links), IS-IS protocol (Level 1 and Level 2 areas, metrics, building best path trees), redistributing route information between dynamic routing protocols, ODR protocol. Network Address Translation (address classification, overloading). Examples of mechanisms supporting IP datagram routing processes: use of IP SLA (Service Level Agreement) techniques, IP routing control using Route Maps, HSRP and VRRP protocols, computer network and router simulators (GNS3, OPNET, Cisco Packet Tracer).
Routing in wide area networks BGP protocol - exterior and interior variants: internal BGP (iBGP) and external BGP (eBGP), RIPE and autonomous systems, BGP route selection procedure, BGP multihoming, prefixes, attributes for prefixes and manipulating their values ​​(WEIGHT, AS-PATH, ORIGIN, NEXT-HOP, LOCAL-PREFERENCE, MED), BGP session control (Route Maps), BGP Communities, iBGP scaling techniques (Route Reflection and Confederations of Autonomous Systems). Multiprotocol Label Switching (MPLS basics, FEC groups, LSR and LER routers in MPLS and MPLS-P and MPLS-PE functionality, NHLFE and ILM tables and label stack processing in datagrams, IP datagram insertion and extraction from the MPLS cloud, Label Distribution Protocol and route finding in MPLS, MPLS VPN basics and Virtual Switching and Forwarding - VRF, VFR without MPLS, i.e. VRF Lite).
Physical Media in Computer Networks Classification of physical media for data transmission in computer networks, selection of medium and design of computer networks, coaxial cable media for the following technologies: Ethernet, Cable Modem, ATM, E-carrier/T-carrier (characteristics and technical limitations, connector systems), media based on copper pair/TP for the following technologies: Ethernet, Token Ring, ATM, CDDI, T-carrier/E-carrier, ISDN, PTSN (characteristics, categories and types of TP cable equipment, connector systems and line outputs for individual standards), Power Line Communication (narrowband and broadband, types of standards, PLC protection), fiber optic media for the following technologies: Ethernet, ATM, FDDI, Fiber Channel, Metro Ethernet (technical characteristics and construction of optical fiber, multi- and single-mode optical fibers, undesirable phenomena occurring during transmission, connector systems, optical fiber polishing standards, cabling assembly and related devices, fiber optic link aggregators, GBIC standards, SFP, SFP+, spectrum multiplexers, optical fiber quality categories), media based on dispersed infrared (IrDA, Li-Fi transmissions and the LOS variant, characteristics of IrDA transceivers, the IrPHY standard, the IrLAP and IrLMP protocols, Tiny TP, IrCOMM, OBEX, IrLAN, IrSS services), media based on infrared lasers (Laser Infrared Technology, technical characteristics and devices, system examples), microwave media (technical characteristics and devices), transceiver devices used in wireless media using radio waves (types of transceiver antennas, antenna cables, wide- and narrowband radio, transmitting power of radio devices and calculating Effective Isotropic Radiated Power, legal regulations regarding transmitting power and transmitting frequencies in Poland), network infrastructure devices (patch cabinet systems, RACK mounting system, installation of network cabling in patch panels: keystone and LSA, gutters, wall sockets, optical fibers in fiber optic distribution frames: sleeves for fiber optic splices and connecting spectrum multiplexers, other elements of active infrastructure in network installations.
Wireless networks Techniques for transmitting information in a wireless medium, standards of popular wireless networks, Wi-Fi (IEEE 802.11 standards, communication modes: IBSS/Ad-Hoc and infrastructure/BSS-ESS, RTS/CTS frame transmission technique, CSMA/CA and DCF/NAV medium reservation technique, interframe spacing, types of frames and their structure, beacon frame and its meaning, DTIM maps and their transmission, channel scanning techniques, Service Set configuration management, simple authentication in Wi-Fi - Open system and Shared key, WEP and its properties, RC4 cipher generation, WPA/WPA2, WPA-PSK use, EAP protocol, WDS - types of bridges and their configuration techniques, Wi-Fi repeaters), Bluetooth (IEEE 802.15 standard and its versions, Bluetooth piconets architecture, Master, Active Slave and Parked Slave devices, signal classes and their ranges, Bluetooth communication security, LMP and LMP protocols L2CAP, RFComm services, TCS BIN in Bluetooth, Service Discovery Protocol), WiMAX (IEEE 802.16 standard and its versions, PHY and MAC layers in IEEE 802.16, devices used in WiMAX), ZigBee (ZigBee piconetwork architecture, ZigBee Coordinator devices, ZigBee Router, ZigBee End Device, Beacon Enabled and non- Beacon Enabled modes of operation, device management using ZigBee Device Object, Application Support Sublayer services), other wireless communication technologies in computer networks (GSM, GPRS, EDGE, UMTS, WirelessHART, HiPeRLAN).
WAN Technologies POTS/PTSN, ISDN BRI/PRI, Frame Relay (static DLCI based PVCs and Frame Relay switching, PDU frames, Frame Relay Traffic Shaping, LMI protocol and SVC switching), ATM (media classification, cell processing in ATM switches, PVC/SVC, NSAP and ESI addressing, ILMI protocol, AAL layer, LANE and MPoA technologies), T-carrier/E-carrier (time slots, media classification, multiplexing), CABLE MODEM/CableTV, EFM - Ethernet in the First Mile (LRE - Long Reach Ethernet, EPON - Ethernet Passive Optical Network), asymmetric DSL (A/H/V/DSL), symmetric DSL, satellite and long-range wireless networks
Security in computer networks Issues related to the use of cryptology in information transfer (cryptography and cryptanalysis, symmetric and asymmetric key cryptosystems, selected ciphers, initialization of communication within a hybrid cryptosystem, RSA algorithm and cryptographic certification of data), Virtual Private Networks (creation of VPN tunnels based on PPTP, L2TP and SSTP protocols, ISAKMP policy protocol, IPSec encryption and authentication protocol, key exchange using IKE, IPSec communication modes), Secure Socket Layer (SSL versions, encryption techniques used in SSL, generation and use of X.509 certificates, use of SSL in ISO OSI higher layer services: SSH, SFTP, HTTPS), computer network screening (hardware and software solutions such as Security Appliance: content filtering modes and techniques, IDS - Intrusion Detection Systems).
Ethernet Networks and Ethernet Switches Configuring non-routing Ethernet switches of an EDGE segment. VLANs, LAGs, STPs, and other technologies. Using Terminal Access Servers to configure Ethernet switches. Installing Twisted Pair cabling, LSA connections, racks, and related technologies, stacking Ethernet switches, LAN installation extensions: PoE systems, RS232-Ethernet bridges. Ethernet fiber optic installations: cabling, passive devices, fiber optic media converters.
IP Routing, Part 1 Basics of using other network operating systems for routers. Configuring Legacy bridges/CRBs/IRBs in IP routers. Point-to-point serial links in computer networks. Using Access Control Lists in Cisco IOS. Statically defined routing. Dynamic IGP (Interior) routing: RIP, OSPF, EIGRP. Redistributing routes between IGP protocols. Routing between Ethernet VLANs using router sub-interfaces and IEEE 802.1Q encapsulation.
IP Routing Part 2 IP Multicast: Configuring and Controlling IGMP Snooping Configuring IP multicast routing on Cisco devices: IP PIM Dense Mode and IP PIM Sparse Mode with Rendezvous Point.
IPv6 Routing and NAT Configuring IP NAT in various variants. Static translations and overloading. Configuring routers to work within the IPv6 protocol. Dynamic routing protocols for IPv6 (OSPFv3, RIPng, EIGRP). IPv6 tunneling in IPv4 networks.
Wide Area Network Routing Internal BGP Routing within a Single Autonomous System Using Cisco Devices. Configuring Full Mesh. Scaling iBGP: Route Reflection and Confederations of Autonomous Systems. External BGP Routing Between Autonomous Systems Using Cisco Devices. Manipulating BGP Route Attributes. BGP Policy-based routing. Redistributing Routes Between IGPs and EGPs.
WAN and last mile technologies Creating Frame Relay networks based on Cisco Frame Relay routers and switches. Static DLCI tables. Using sub-interfaces in IP routers to identify Frame Relay PVCs. Configuring connections in ATM networks based on SONET/OC3 fiber optic links. Configuring T1/E1 connections based on Cisco routers with integrated channel service unit (CSU) and data service unit (DSU). Configuring T3/E3 connections with ATM encapsulation. Configuring SHDSL interfaces. Creating bridges over DSL (in ISO OSI layer 2) and superimposing IP network segments over SHDSL links. Configuring VDSL switches (configuring ports, QoS services, ACLs in layers 2-4), configuring VDSL routers Creating ATM connections based on IMA (Inverse Multiplexing for ATM) aggregate interfaces
Ethernet Routing Switches and WAN Link Sharing Devices Configuring Ethernet Routing Switches of the EDGE Segment. Configuring Switches from the CORE and CAMPUS Segments. Using WAN Modules in Ethernet Switches.
Wireless networks and network access control Configuring wireless networks (WiFi) using the Cisco Aironet platform. WDS bridges. Managing WiFi subscriber routers - HotSpot, configuring VDSL2 subscriber concentrators, configuring wireless network security. Configuring Virtual Private Networks created using physical devices. Configuring Security Appliance devices. Configuring SOHO segment devices: Edge routing, network screening (NAT, multilayer filtering techniques, proxy sessions).
Analysis of datagram traffic in a computer network. Tracking IP datagrams generated using popular communication protocols learned in previous classes. Techniques for tracking traffic in computer networks, traffic monitoring devices. Using your own (based on programmable microcontrollers) devices generating network traffic: creating software that parses and generates Ethernet frames, ARP, IP, ICMP, UDP, TCP datagrams in accordance with protocols. Programming network experimental devices built on the basis of Atmel AVR32 and MikroTik RouterBoard microcontrollers.","Computer networks, network multimedia systems, network services.",Polish
27,Compilation Theory and Compilers,4,"General knowledge of basic issues in formal linguistics (generative grammar, parsing, automata), general knowledge of languages ​​and the programming process provided for in the study program, basics of algorithms (trees, graphs), basics of logic.",4.0,Knows and understands the basic principles of lexical and syntactic analysis; Knows and understands the basic principles and modules of compiler work; Knows and understands the individual parsing strategies; Can build a lexical analyzer; Can build a syntactic analyzer; Can use the available scanner and parser generators; Knows the importance of compilers/translators in contemporary reality,"Compiler - basic issues Compiler, translator, interpreter, others. Compiler structure, basic work modules. Lexical analysis, simple scanner implementation. Scanner generators. Syntactic analysis, grammatical parsing methods. Semantic analysis. The problem of recovering from syntactic errors. Examples of compilers.
Example of the compilation process A simple example of the complete compilation process including code generation.
Top-Down Parsing LL Grammars and Analyzers, Array-Driven and Recursion-Driven Parsers. Principles of Construction and Operation of the Automaton, Examples of Parsing, Properties of LL Languages ​​and Grammars
Bottom-up parsing LR grammars and parsers. Construction of the parsing table, SLR parsers, LALR parsers, the canonical LR parser, parsing examples, properties of LR languages ​​and grammars.
Operator precedence methods Operator precedence grammars, Wirth-Weber relations, operator precedence parsers.
Syntax-directed translation Attributed grammars. S-attributed grammars and bottom-up computation. L-attributed grammars and top-down and bottom-up computation, recursive computation.
Parser Generators Overview of parser generation tools.
Code Generation and Optimization Type checking, memory reservation. Code generation, generation algorithms, intermediate code. Code optimization.","The aim of the module is to familiarize students with selected theoretical and practical issues in the field of constructing compilers, interpreters and translators. In particular, the subject of the course will be: - lexical analysis, simple scanner implementation. - scanner generators, syntactic analysis, - LL grammars and analyzers, table-driven and recursively driven parsers. - LR grammars and analyzers, constructing a parsing table, SLR parsers, LALR parsers. - parser generators, code generation and optimization.",Polish
28,Data Engineering,4,Students should have basic knowledge of programming and database systems.,3.0,,"Types of datasets. Data formats related to each type.
Tools for data import, analysis and integration. Databases vs. data-processing libraries.
Multidimensional data. Geometric vs. geographic data. Representation of locations in different coordinate systems.
Geospatial data. Integration of datasets using the spatial component. Visualisation of multidimensional datal.
Time-series and log data. Efficient means of analysis and detecting anomalies.
Performance of data processing. Influence of query design on processing time.
Data quality estimation: completeness, consistency, domain-specific issues.","The course is focused on practical aspects of dataset analysis and tools used to accomplish such tasks. The specific characteristics of different data classes will be presented, including spatial (georeferenced), time series, log and sensor data. The participants will learn a wide spectrum of tools used for analysis, including general-purpose databases and software (PostgreSQL, Pandas), specialized solutions (PostGIS, GeoPandas) and visualization and data drilling tools (pgAdmin, QGIS). Each dataset and tool class is presented using examples of real-life data, which are then processed by the students during project classes.",english
29,Machine learning,4,"The student knows the basics of: - probability theory and statistics. - linear algebra, - programming in Python.",4.0,"classic machine learning algorithms for regression, classification, clustering, dimensionality reduction, and pattern searching.; operation of neural networks and knows the characteristics of basic types of networks.; basic problems that arise during machine learning and understands their mathematical causes.; implement a Python script that trains a model for a selected machine learning topic.; select the appropriate machine learning algorithm depending on the selected topic and available data.; validate the model and solve typical problems that arise during model training.; recognize the threats posed by unethical use of machine learning.","Classical machine learning algorithms - classification (including: naive Bayesian classifier, K-NN, logistic regression, SVM, decision trees) and ensemble methods (on the example of decision trees - Random Forest, Gradient Boosted Trees).
Classical machine learning algorithms - regression (including linear regression, polynomial regression)
Classical machine learning algorithms - clustering (including K-means, DBSCAN)
Classical machine learning algorithms - pattern searching (including: Apropri, FP-Growth, ECLAT)
Classical machine learning algorithms - dimension reduction (including PCA, LSA, LDA)
Operation of neural networks and the mathematical basis of their training.
Using simple neural networks (MLP) for classification problems. Training a neural network.
Convolutional networks CNN and their extensions including GAN.
Recurrent networks RNN and their extensions, including: LSTM
Autoencoders
Reinforcement Learning
Issues related to the threats associated with the development of artificial intelligence and unethical use of machine learning methods.","Introduction to classical machine learning algorithms - classification (including: naive Bayes classifier, K-NN, logistic regression, SVM, decision trees) and ensemble methods (using decision trees as an example - Random Forest, Gradient Boosted Trees). Use of simple neural networks (MLP), Convolutional networks CNN and their extensions including: GAN, Recurrent networks RNN and their extensions including: LSTM. Reinforcement Learning.",Polish
30,Software development models,4,"Knowledge of programming processes and paradigms acquired during studies. Knowledge of requirements engineering and systems analysis processes (structured approach, use case models)",4.0,Knows and understands the basic concepts and issues related to software modeling; Knows the principles and understands the importance of building software models; Is able to build advanced software models; Is able to verify and evaluate advanced software models; Knows the importance of the created advanced software models for society,"Static structure of the system. Modeling diagrams of system classes and objects, obtaining classes, methods and attributes, finding types. Diagrams, verification and validation. OCL language, constraints and validation of constraints. Modeling system dynamics, creating a behavioral model. Interactions, state machines, flows. Other dynamics diagrams. Implementation diagrams. Extension mechanisms. SysML language. Origin of SysML language, language goals, modeling system requirements, defining structure and blocks, modeling constraints, modeling flows and activities, modeling interactions and state machines.
The aim of the laboratory exercises is to practically practice specific diagrams and software models using advanced design tools.
The aim of the design exercises is to create advanced software models, transform these models, covering different domain cases.","Static structure of the system. OCL language, constraints and constraint validation. Modeling system dynamics. Interactions, state machines, flows. Other dynamics diagrams. Implementation diagrams. Extension mechanisms. SysML language. Origin of SysML language.",Polish
31,Design studio 1,5,"Knowledge of software analysis and design methods, programming skills",3.0,Knows how to plan and organize a project in practice in order to solve a given problem; Is able to conduct an analysis of a selected problem; Is able to propose a solution to a selected problem; Is able to verify the proposed solution; Knows the importance of intelligent IT systems in contemporary reality,"The aim of the subject is to practically solve a selected problem in a given topic and thematic area, especially in the field of intelligent systems and artificial intelligence, characterized by high innovation. The project should include analysis, design and validation of the proposed solution. Due to its size, the project may be continued in the next semester as part of a similar subject","The aim of the subject is to practically solve a selected problem in a given topic and thematic area, especially in the field of intelligent systems and artificial intelligence, characterized by high innovation. The project should include analysis, design and validation of the proposed solution. Due to its size, the project may be continued in the next semester as part of a similar subject",Polish
32,Internet of Things and Intelligent Embedded Systems,5,"Knowledge of computer networks, especially wireless ones.",3.0,"basics of the construction, operation and architecture of IoT systems; standards for data exchange between devices in IoT systems; current and probable future scope of application of the Internet of Things; design, build and run a simple IoT system; use selected cloud computing services to create IoT applications; become aware of the social effects of the popularization of the Internet of Things, both positive and negative.","Definition and concept of the Internet of Things (IoT). History of the concept, areas and examples of utility and industrial applications, benefits. Development prospects. Wireless sensors, typical hardware and software solutions, operating systems used in IoT. Software used to create IoT applications. Introduction to the structure and architecture of the Internet of Things. Communication between devices in IoT, various topologies in such systems. Networks (wired and wireless) in IoS systems, communication protocols, IPv6 in the Internet of Things. Construction of network nodes, data exchange. Basics of Bluetooth technology and its application in IoT. Data processing in IoT systems. Application of cloud computing in the Internet of Things, the most important services and ways of using them. Application of the Microsoft Azur cloud platform. Applications of IoS such as: smart city, smart grid, smart building, smart health. Big data and the Internet of Things. Security and privacy issues related to IoT systems. Predictable social effects and problems related to the development of IoT.
Design exercises will involve designing, building, configuring, running, and testing simple IoT systems and applications using technologies discussed in lectures.","The course will present issues related to the use of Internet of Things systems, their structure, functioning, design and implementation, and the data exchange technologies used in them. In addition, the perspectives of IoT development and possible social effects will be discussed.",Polish
33,Discrete system simulation,5,Basic mathematics and physics as well as programming skills are required,2.0,The student knows and understands the subsequent stages of creating a model and computer simulation.; The student knows and understands the theoretical foundations of discrete simulations; The student is able to implement the subsequent steps of defining a model of a given system and creating a computer simulation; The student is ready to implement projects in a team and cooperate with other people,"Complex Systems, Discrete Simulation - Introduction Definitions of complex systems and the concept of discrete simulation. Objectives of creating models and simulations of complex systems. Introduction to modern modeling and simulation techniques. Review of simulation methods. Basic concepts. Characteristics of discrete simulations. Practical examples and applications
Discrete simulation basics. Principles of creating models. Characteristics of a good model. Types of models. Interpretation of theory and model implementation. Description of complex processes. Decomposition of a complex process. Designing simulations and implementing simulations. The issue of optimizing the simulation process. Simulation of discrete processes.
Cellular Automata Basic concepts related to cellular automata. Non-homogeneous, asynchronous and probabilistic cellular automata. The usefulness of individual types of automata in modeling and simulation. From a non-homogeneous automaton to an agent system. Application of cellular automata in modeling complex systems. Construction of algorithms and their optimization Practical examples of automata applications
Agent-based paradigm in discrete process simulation Definitions. The essence of ABM systems (Agent-based modeling). ABM systems and MAS systems (Multi-Agent Systems). The usefulness of agent systems in practical solutions. In which cases is it worth using the agent approach? The agent approach and other simulation methods. Time in agent systems. Stages of creating models
Calibration and Validation of Models The conceptual scope of model calibration and validation. Problems of model calibration. Stages of model validation and simulation. Discussion of practical cases related to model calibration and validation. ISO (and other) standards related to model calibration, validation and verification
Practical aspects of creating a discrete simulation Creating a discrete simulation using crowd dynamics as an example. Selecting a method depending on the scope of the simulation: queuing system, cellular automaton, molecular dynamics, agent system.
Applications of discrete simulation Discrete simulation in road traffic modeling. Application of agent system. Model development. Calibration and validation issues.","Complex systems, discrete simulation, Fundamentals of discrete simulation, Cellular automata, Agent paradigm in the simulation of discrete processes, Calibration and validation of models, Practical aspects of creating discrete simulation, Applications of discrete simulation.",Polish
34,Web application programming,5,,4.0,"basic technologies for building modern web applications (HTML 5, CSS3, JS); SPA application architecture and its application for creating modern web applications; basic principles related to building applications in client-server architecture; basics of the http protocol; concepts of component environments for creating modern web applications based on the ECMAScript language; create a simple website or application running on the browser side in a selected tool; independently design and create web applications using SPA architecture and component frameworks; use techniques and technologies (asynchronous programming, WebSockets) supporting the creation of web applications.","Introduction to web technologies Discussion of basic components of web applications: client, server, http protocol. http protocol as a foundation of web applications. The concept of http session - the main mechanism of web application. From a simple website to SPA (Single Page Application) - review of possible solutions and technologies. Communication with the server (sending and receiving data using XMLHttpRequest object - the basis of AJAX technology and its modern implementations (Ajax in JQuery, Fetch API)) The role of frontend and backend in modern web applications.
HTML5, CSS3, JavaScript as the foundation of web applications. Understanding the role of HTML, CSS, JavaScript in creating web applications. Basic technologies and frameworks. New tags and forms in HTML5. Basics of design and ergonomics. Techniques for building a page layout using new patterns: flex and grid. Creating Interactive pages using the HTML5 API (multimedia, geolocation, working with files, etc.). CSS3 - a way to separate content from appearance. The concept of cascading, the Box Model, Selectors and pseudo-classes, the BEM methodology. User interface animation: an overview of new features: transitions, transforms, frame animations, filters.
EMCS7, TypeScript JavaScript - its role in web applications. JavaScript - interactivity on the page (DOM model support + event model) Discussion of new language elements - EMCS7 version. TypeScript as an extension of JavaScript.
Frontend Layer Technologies Responsive Web Design - Principles of designing responsive pages (media Query) using the Bootstrap library Component frameworks in the frontend: Angular, React, Vue. Discussion of the most important concepts.
Angular in Detail An overview of the architecture and basic constructs of the Angular framework.
React in detail An overview of the architecture and basic constructs of the React library
MEAN stack - backend implementation based on JavaScript stack Discussion of individual components of the MEAN stack with special emphasis on NodeJS and ExpressJS. Building your own application server. Familiarization with the Mangoose library as an access mechanism to MangoDB. Refusal of basic CRUD constructs from the NodeJS level.
State Management and Reactive Programming in Web Applications RxJS Library and Flux Architecture (Redux as an Example) - Modern Ways to Deal with the Complexity of Web Applications Authorization and Authentication in the Context of the Architecture of the Entire System.",An introductory module to the topic of creating and operating web applications. The basics of languages ​​and technologies used to create websites and web applications are discussed.,Polish
35,Operating systems,5,,1.0,"The student knows and understands the basic concepts of synchronization problems, the synchronization mechanisms used, deadlock prevention and avoidance algorithms.; The student knows and understands the structure and functions of processes and threads and their management methods by the operating system.; The student knows and understands the organizational schemes of memory and virtual memory in operating systems.; The student knows and understands the basics of using segments for dynamically connecting modules, the dynamic connecting process, the structure of the process implemented by the operating system.","The first two lectures (4 hours) are a general introduction, covering topics such as: • the role and tasks of the operating system, • the location of the operating system (especially the kernel) in the software structure of a computer system, microkernel architecture. • classification of operating systems (centralized, networked, distributed), • the general principle of operation of an operating system (the way control is transferred to the kernel program), • the concept of a process, resource and thread; user-level threads, kernel threads, lightweight processes, multithreading models.
The next three lectures (6 hours) deal with the issues of concurrent processing and process synchronization. Initially, these issues are discussed at the architectural level, without significant support from the operating system (apart from the implementation of the process concept). The scope of this module therefore includes such issues as: the concept of atomic instruction and interleaving, the essence of synchronization and correctness of concurrent programs (safety and liveness). These concepts are illustrated with example solutions to the mutual exclusion problem, including Peterson's algorithm, Lamport's algorithm and solutions based on the atomic instructions test&set and exchange. Then, the synchronization mechanisms supported by the operating system or high-level programming language are discussed: • semaphores - their classification and implementation, • POSIX standard mechanisms - locks and condition variables, • monitors and critical regions. Examples of the use of the above mechanisms are shown in solutions to classical synchronization problems: producer and consumer, readers and writers, five philosophers, sleeping hairdressers and the implementation of a generalized semaphore using binary semaphores. Finally, the mechanisms of synchronization in a distributed environment are discussed: messages, remote procedure/method invocations, and rendezvous. The next lecture (2 hours) is devoted to deadlock — describing the phenomenon itself and discussing methods of counteracting it. The following are presented: necessary conditions of deadlock in the context of recoverable and non-recoverable resources, definition of deadlock, description of the system state for the purposes of deadlock analysis — allocation graph and waiting graph and their specific properties. As for counteracting it, the following approaches are discussed: deadlock prevention, deadlock avoidance (including the banker's algorithm), deadlock state detection and briefly the rules for removal.
the next two lectures (4 hours) discuss memory management issues. The first module focuses on memory management, including: memory division, memory allocation and address transformation, in particular in paged and segmented memory systems. On this occasion, the phenomenon of internal and external fragmentation is discussed, as well as the problem of memory protection and sharing. The second module concerns the implementation of virtual memory (paging and segmentation). The page fault phenomenon, its handling and basic problems related to it are discussed, i.e. the problem of page exchange and the problem of resuming instructions. The majority of the module is devoted to exchange algorithms - their classification, operation, applications and implementation issues. The next lecture (2 hours) concerns the use of segments during program execution by the operating system and the forms of the program during processing by the compiler/assembler, the linker, the loader, program modules. The next one (2 hours) discusses the form of modules, the linker, the process of static linking, the loader, the process of loading the program into memory, the program segment. The modular form of a program in memory, the problem of dynamic linking, internal, remanent, external objects, methods of dynamic linking are the subject of the next lecture (2 hours). The following will be discussed in the next lecture (2 hours): • Dynamic linking, the environment of process execution segments, examples of including modules at runtime, the form of the “object” module in dynamic linking. • The file system. The structure of files and directories. Disk space allocation. The following will be discussed in the next lecture (2 hours): • Input-output management. • The role of device drivers. The last lecture (2 hours) is a summary lecture.","Fundamentals of operating systems, principles of their operation. Rudimentary problems related to the management of computer system resources and algorithms for their solution.",Polish
36,Digital image processing,5,,3.0,"Has structured knowledge of the mathematical foundations of 2D image frequency transforms, and basic methods of image analysis and compression.; Has structured knowledge of color representation systems in images, pre-processing algorithms.; Is able to independently implement image processing, compression and analysis algorithms in a dedicated software environment.; Is able to indicate key application areas for image processing and analysis issues and understands the great importance of their use for the economy and the environment.","Basic, selected theoretical issues of image processing, analysis and compression.
Programming selected image processing, analysis and compression algorithms in the selected programming language or programming environment.","Digital image acquisition – devices; sampling; quantization. Basic methods of digital image processing: image quality improvement; arithmetic operations; context methods: filtration and removal of interference, edge detection, nonlinear operations. Morphological methods. Digital image analysis: segmentation; indexation, determination of object parameters; shape coefficients; moment invariants; Image processing in the frequency domain: Fourier transform, DCT transform, JPEG compression.",Polish
37,Legal aspects and company organization,5,,2.0,"legal conditions for establishing and operating enterprises in Poland; basics of accounting and the tax system in Poland; legal aspects of employing employees; characterise the individual legal forms of enterprises in Poland and can indicate the differences between them; set up a company in Poland, prepare and complete the relevant forms and forms; manage the process of employing employees in an enterprise; set up and run your own enterprise in a selected legal form.","The concept of business activity and entrepreneur. Legal forms of enterprises in Poland. The Act on Freedom of Economic Activity. Individual. Civil partnership. Commercial Companies Code. Partnerships: general partnership, professional partnership, limited partnership, limited joint-stock partnership. Capital companies: joint-stock company, limited liability company. Preparatory proceedings for establishing a company. Business plan. Registration of business activity. Taxation of business activity. Tax system in Poland. Forms of taxation of enterprises (tax card, flat-rate tax on recorded revenues, general principles). Value Added Tax (VAT). Hiring employees in a company. Forms of employment. Work safety. Start-up. Enterprise management.
Explanations for the practical task carried out in teams. The Act on Freedom of Economic Activity. Legal forms of enterprises. The Civil Code (individual, civil partnership). The Commercial Companies Code (partnerships: general partnership, professional partnership, limited partnership, limited joint-stock partnership, capital companies: joint-stock company, limited liability company). Preparatory proceedings for establishing a company. Registration of business activity, or how to establish your own company. Taxation of business activity (tax system in Poland, forms of taxation, VAT). The employee recruitment process. Hiring employees (employment contract, contract of mandate, contract for specific work). Discussion and discussion of the homework. Final test.","Information including: concepts of business activity and entrepreneur, legal forms of enterprises in Poland, the Act on Freedom of Business Activity, natural person, civil partnership, Commercial Companies Code, partnerships: general partnership, professional partnership, limited partnership, limited joint-stock partnership, capital companies: joint-stock company, limited liability company, preparatory proceedings for establishing a company, business plan, business registration.",Polish
38,Professional practice,6,"Internships are undertaken after the sixth semester of studies, therefore it should be expected that the student has the appropriate knowledge and practical skills acquired during the three years of engineering studies, allowing them to undertake professional internship.",4.0,"Has the appropriate knowledge to produce software as part of the internship.; Has knowledge of the functioning of various operating systems needed to administer IT systems during the internship.; The student has the appropriate knowledge regarding solving algorithmic issues that they may encounter during the internship.; The student is able to write computer programs in programming languages, the knowledge of which is required as part of the internship.; The student is able to assess the usefulness of various programming environments and IT tools in terms of their usefulness for solving various types of problems that arise during the internship.; The student is able to solve various types of IT problems in the area of ​​control and management, which they may encounter during the internship.; The student is aware of the need to perform the tasks assigned to them as part of the internship in a professional and reliable manner.; The student understands the need for continuous education and expansion of their knowledge in accordance with the specificity of the tasks assigned to them at the workplace as part of the internship.; The student is aware of the responsibility for the work performed as part of the internship. The student is also ready to work in a larger programming team and follow the instructions given by the management of such a team.","Learn to become familiar with and comply with the regulations and various types of requirements arising from occupational health and safety regulations in force at the workplace where the internship is carried out.
Learn, at least to a basic extent, the basic organisation of the workplace, i.e. its organisational structure, authorisations to issue official orders, their scope, principles of responsibility for the activities performed, document circulation in a given organisation, principles of creating necessary documentation, such as protocols and regulations, obligations resulting from the need to protect official secrets, etc.
Gain general knowledge about the activities carried out in the workplace related to the production, implementation, testing and maintenance of information systems software.
Obtain the necessary information on development trends in the IT industry based on professional literature and an interview conducted at the place of internship.
Learn the basic principles of economics, management and marketing, which are determined by the specific nature of a given IT enterprise's operations.
Familiarize yourself with the basic technical problems that the implementation of the full software development cycle creates in modern IT enterprises. In particular, the trainee should familiarize himself with the methods of formal specification of IT systems, their validation, testing, implementation and maintenance used in a given IT enterprise.","In the case of internships, the program content is closely related to the specific activity of the IT company where the internship takes place.",Polish
39,Copyright and Patent Law,6,Lack,1.0,"basic principles of protection of individual subjects of intellectual and industrial property rights, including in particular those concerning the subjective scope of protection, content of rights, duration of protection and liability related to infringement; basic types of civil law contracts concerning the transfer or licensing of subjects of intellectual or industrial property rights and key principles for shaping each of such contracts, with particular emphasis on contracts for the use of computer software, mobile applications and websites; key legal requirements related to conducting e-commerce activities in the context of the protection of intellectual and industrial property rights, with particular emphasis on services provided electronically; principles of personal data protection, with particular emphasis on the implementation of the rights of data subjects and proper data protection; define and classify in an appropriate manner the basic subjects of intellectual property rights and industrial property rights; identify the basic rights that are available to creators/authors of subjects of intellectual/industrial property rights and the requirements for the protection of these subjects; distinguish contracts transferring exclusive rights from license agreements and identify the basic provisions that should be included in such contracts; indicate the key aspects and legal requirements related to conducting e-commerce activities, with particular emphasis on services provided electronically; identify the basic principles of personal data protection, including in particular the principles relating to the organisational and technical protection of data, the obligations imposed on the administrator and the entity processing personal data, the basic rights of persons whose data are processed and the differences between the entrustment agreement and the access agreement","1. Basic principles of protection defined in copyright law, taking into account the subject of protection, rights and liability for infringement. Particular consideration of the principles of protection of works such as computer software, mobile applications, technical documentation, websites / portals. 2. Issues related to drafting legal and copyright agreements, with particular consideration of license agreements and agreements on the transfer of copyright; discussion of the principles related to drafting software implementation / maintenance agreements. 3. Basic principles of personal data protection, with particular consideration of the requirements imposed on the data administrator and the entity processing data on request. 4. Discussion of the issues of legal aspects of conducting e-commerce activities, with particular consideration of issues related to the provision of services electronically. 5. Basic principles related to the protection of industrial property rights, with particular consideration of inventions and trademarks.","Legal aspects of the protection of works and objects of industrial property rights, basic principles of protection of individual objects of intellectual and industrial property rights, principles of shaping agreements on the transfer / licensing of objects of exclusive rights, key principles related to the protection of personal data, issues related to the protection of intellectual property rights in the field of e-commerce.",Polish
40,Theory of Computation,6,Fundamentals of Logic and Set Theory,4.0,"The student knows the basic models of computation: recursive functions, computability using functional programs, computability using structured, unstructured programming languages, Turing machines; The student knows the concept of decision problems and methods of their coding; The student knows the concept of decidability and decidable languages ​​and also understands the halting problem and its undecidability and knows the basics of machine language arithmetization, coding Turing machines, the formal concept of computation, Turing's theorem.; The student knows Gödel's theorem (on the incompleteness of arithmetic); The student is able to express basic arithmetic functions using the formalism of recursive/primitively recursive functions; The student is able to define and describe the operation of a Turing machine and machines that are modifications of MT; The student is able to write arithmetic functions in the lambda calculus formalism and is able to describe the principles of machine language arithmetization, is able to give examples of decision (decidable) problems.; The student is ready to search for solutions to complex computational problems; The student perceives Computer Science as a discipline embedded in a well-defined and coherent formal system.","Preliminaries Models of computation Recursive functions: primitively recursive functions and relations, coding of the set N^k, Ber-Gödel function, recursion with history, simple recursion elimination theorem, Kleene's normal form recursion theorem Computability using functional programs (lambda calculus). Basic concepts. Lambda definability: coding of natural numbers, coding of functions, lambda definability of recursive functions, Church-Rosser theorem, Church's theorem Computability using unstructured programming languages ​​(flow charts). Basic concepts, Wang's theorem. Structured programming languages ​​Turing machines. Basic concepts, MT modifications, nondeterministic MT, recursive functions and MT, Decision problems (PD): basic concepts. PD coding Machine language arithmetization MT coding. Computation. Turing's theorem. Universal language The halting problem. Characterization of partial decidability. Rice's Theorem Problems in First-Order Logic Basic Concepts. Semantics, Interpretation of Terms and Formulas Arithmetic. Q-Theory, Arithmetization of Q-Theory Language Gödel's Theorem","1. Preliminaries 2. Models of computation a. Recursive functions: primitively recursive functions and relations, coding of the set N^k, Ber–Gödel function, recursion with history, simple recursion elimination theorem, Kleene's normal form recursion theorem b. Computability using functional programs (lambda calculus). Basic concepts. Lambda definability: coding of natural numbers, coding of functions, lambda definability of recursive functions, Church–Rosser theorem, Church's theorem c. Computability using unstructured programming languages ​​(flow charts). Basic concepts, Wang's theorem. d. Structured programming languages ​​e. Turing machines. Basic concepts, modifications of MT, nondeterministic MT, recursive functions and MT, f. Decision problems (PD): basic concepts. PD encoding 3. Machine language arithmetization a. MT encoding. Computations. Turing's Theorem. Universal Language b. Halting Problem c. Characterization of Partial Decidability. Rice's Theorem 4. Problems in First-Order Logic a. Basic Concepts. Semantics, Interpretation of Terms and Formulas b. Arithmetic. Q-Theory, Arithmetization of Q-Theory Language c. Gödel's Theorem",Polish
41,Software Engineering Team Project,6,"Knowledge of software analysis and design methods, knowledge of software development models, good programming skills acquired during studies",2.0,Knows how to plan and organize a project in practice; Is able to formulate requirements for the system; Is able to conduct a system analysis; Is able to perform a system design; Is able to implement the design based on the design; Is able to conduct system tests; Knows the importance of software in contemporary reality,"The aim of the subject is to practically and collectively perform a real software engineering project in a given topic, with the implementation of all phases typical of IT projects, i.e. from the requirements engineering phase through the analysis phase, the general design phase, the detailed design phase, implementation in a selected language, integration, testing and implementation phase. The project should also take into account a number of aspects important for the project, such as: selection of the project creation methodology, selection of the software life cycle, development of a schedule, preliminary cost estimation, analysis of software architectures, management of software versions and configurations, and others.","elements of requirements engineering, project development methodologies, software life cycle, scheduling, effort estimation, software architecture analysis, software version and configuration management.",Polish
42,Design Studio 2,6,"Knowledge of software analysis and design methods, programming skills",3.0,Knows how to plan and organize a project in practice in order to solve a given problem; Is able to conduct an analysis of a selected problem; Is able to propose a solution to a selected problem; Is able to verify the proposed solution; Knows the importance of software in contemporary reality,"The aim of the subject is to practically solve a selected problem in a given topic and thematic area, especially in the field of intelligent and innovative systems. The project should include analysis, design and validation of the proposed solution. The project, due to its size, can be a continuation from the previous semester within a similar subject","The aim of the subject is to practically solve a selected problem in a given topic and thematic area, especially in the field of intelligent systems and artificial intelligence, characterized by high innovation. The project should include analysis, design and validation of the proposed solution. Due to its size, the project may be continued in the next semester as part of a similar subject",Polish
43,Engineering diploma workshop,7,Mastering the material from the entire first-cycle studies is required.,1.0,"Knows the basic requirements regarding the form of preparing an engineering diploma thesis (or engineering project) and the form of preparing a presentation of the results of the diploma thesis for the defense.; Knows the elementary rules for citing source works.; Is able to prepare a presentation of the results of the diploma thesis.; Is able to assess the quality of the presented presentation regarding the engineering project, working in a group.","In the first part of the course, the instructors present the basic principles of preparing an engineering thesis and presentation for defense.
In the remaining part of the course, students prepare a presentation on their own, the purpose of which is to discuss the purpose, scope, and current progress of their engineering work. The purpose of the course is to prepare students for the defense of their engineering work. During the seminar, participants take part in discussions that are to help them improve their presentations in terms of form and content. The experience gained during the course is to be helpful in future professional work, where the ability to present and discuss the results of one's own work in a team is extremely important.",Presentation of current progress on engineering work.,Polish
44,Graduation project,7,Obtaining the required number of ECTS points.,15.0,"Has systematized knowledge of computer science and intelligent systems necessary to carry out tasks defined in the topic of the diploma thesis; Has systematized knowledge of phenomena, models, processes and objects that are related to the implementation of the undertaken topic of the diploma thesis; Is able to independently solve the problem formulated in the topic of the diploma thesis; Is able to prepare a description of the implementation of the task that is the subject of the topic of the diploma thesis; Is aware of the importance of the task he/she carries out for the institution, company, environment, society","Preparation of the text of the thesis and performance of the necessary research, experiments or implementations required by the topic of the thesis.",Preparation of a diploma thesis,Polish
