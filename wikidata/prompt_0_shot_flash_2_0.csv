idx,course_name,program_content,educational_concepts,prompt_0_shot_flash_2_0,prompt_0_shot_flash_2_0_v2
1,Final Project,Preparation of the diploma thesis,Thesis preparation,Diploma thesis,"diploma thesis
"
2,Diploma Seminar,"In the first part of the course, the lecturers present the basic principles of preparation of engineering work and presentation for a thesis defense. In the rest of the course, students prepare presentations, which aim to discuss the purpose, scope and current progress of their engineering works. The course aims to prepare students for the thesis defense.","Thesis preparation, public speaking skills, Scientific communication","Thesis, Presentation, Engineering methodology","Thesis, engineering, presentation, scientific communication
"
3,Web application technologies,"History of the web, network foundations and protocols used for web application development
Design of websites: HTML, CSS, responsive design, basics of typography
Client-side interaction: JavaScript and related frameworks
Server-side development: building and deploying web apps using Flask and other technologies, designing REST APIs for communication with front-end","web application development, History of the World Wide Web, network protocol, HTML, CSS, web design, Responsive Web Design, Typography, JavaScript, web framework, Server-Side Scripting, Flask (web framework), rest api","HTML, CSS, Responsive web design, Typography, JavaScript, REST API, Flask (web framework), Web application, Network protocol","HTML, CSS, Responsive web design, Typography, JavaScript, Framework (software), Server-side, Web application, Flask (web framework), REST API, Front-end and back-end
"
4,Introduction to Artificial Intelligence,"Discussion and explanation of the subject/course syllabus during the first class. Discussion of teaching content and supporting materials (literature, websites). Introduction: history, systems, methods, areas of application. AI definitions. Architecture of intelligent systems. Knowledge base systems (KBS). The concept of an intelligent agent. 
Methods of representing and processing symbolic knowledge. Logic in AI. Examples of problems. Classification of models, methods and tools. State space search algorithms. Heuristic search methods. Prolog and logic programming as AI tools. 
Programming with constraints. Rule systems, expert systems and business rules. Decision support systems. Planning. Automatic generation of plans. Tutored and unsupervised machine learning. Semantic web and ontologies. Probabilistic methods. The Bayesian rule and networks. Other selected AI issues. Summary. Development directions.","Artificial intelligence, Intelligent agent, knowledge-based system (KBS), Knowledge representation, State space search algorithm, heuristic search method, ontological reasoning, Logic programming, Prolog, Constraint programming, Rule-based system, Expert system, Decision support system, unsupervised machine learning, supervised machine learning, Semantic Web, Ontology, Probabilistic method, Bayesian network, Bayes' theorem","Intelligent agent, Knowledge-based system, Symbolic knowledge representation, Logic in AI, State space search, Heuristic search, Logic programming, Constraint programming, Rule-based system, Expert system, Business rule, Decision support system, Planning (artificial intelligence), Automatic planning, Supervised learning, Unsupervised learning, Semantic Web, Ontology (information science), Probabilistic methods, Bayesian network","Artificial intelligence, intelligent agent, knowledge-based system, symbolic knowledge representation, logic in artificial intelligence, state space search, heuristic search, logic programming, constraint programming, rule-based system, expert system, decision support system, automated planning, machine learning, semantic web, ontology, probabilistic method, bayesian network
"
5,Formal Languages and Compilers,"Project in formal languages and compilers: Student implements a larger translator, compiler or interpreter.
Labs in formal languages and compilers: Programming assignments: (1) lexical analyzer (scanner) (3) grammar specification and parser (2) abstract syntax tree (4) type checker and semantic analyser (5) code interpreter or generator
Lectures on formal languages and compilers: (1) Introduction: alphabet, string, language, grammar (2) Regular expression, finite automata (3) Transformations of finite automata (4) Introduction to translation (5) Lexical analysis, scanner, flex/PLY (6) Grammars, context-free grammars (7) Push-down automata (8) Syntax analysis (9) LL parsing (10) LR parsing, bison, PLY (11) Semantic analysis, type-checking, attributive grammars (12) Intermediate code generation, stack frames (13) Code optimization, program analysis (14) Assemby code, target code generation
Labs in formal languages and compilers: Programming assignments: (1) lexical analyzer (scanner) (3) grammar specification and parser (2) abstract syntax tree (4) type checker and semantic analyser (5) code interpreter or generator (6) code optimizer","Formal language, Compiler, Interpreter, Lexical analysis, scanner (lexical analysis), parser, Regular expression, finite automaton, Grammar, Context-free grammar, Pushdown automaton, Syntax analysis, LL parsing, LR parsing, Semantic analysis (program), Type checking, stack frame, Attribute grammar, code generation, Code optimization, Program analysis, Assembly code, Abstract syntax tree","Formal language, Compiler, Interpreter (computer science), Translator (computer science), Lexical analysis, Scanner (lexical analysis), Grammar (formal grammar), Parser, Abstract syntax tree, Type checking, Semantic analysis, Code generation, Code optimization, Alphabet (computer science), String (computer science), Regular expression, Finite automaton, Translation (computer science), Flex (lexical analyzer generator), PLY (lex and yacc for Python), Context-free grammar, Pushdown automaton, Syntax analysis, LL parsing, LR parsing, Bison, Attributed grammar, Intermediate code, Stack frame, Program analysis, Assembly code, Target code.","Formal language, compiler, interpreter (computer science), translator (computer science), lexical analysis, scanner (lexical analysis), grammar, parser, abstract syntax tree, type checking, semantic analysis, code generation, code optimization, alphabet (formal languages), string (computer science), regular expression, finite automaton, pushdown automaton, syntax analysis, LL parsing, LR parsing, attribute grammar, intermediate representation, stack frame, program analysis, assembly language, target code
"
6,Databases II,"* Relational database systems (short revision). * Database normalization and denormalization, impact on database performance. * NoSQL database systems: storage, processing, distribution, ACID and CAP. * GIS and spatial data. * Database systems for data warehouses, multidimensional data model, star schema. snowflake schema, OLAP cube operations. * Extract, Transform and Load (ETL) * Optimization of database performance. * Database systems security.
Implementation of a database system.Gaining experience with database tools and programming.","Relational database, Database normalization, database denormalization, NoSQL database, ACID properties, CAP theorem, GIS, Spatial data, Data warehouse, Multidimensional data model, Star schema, Snowflake schema, OLAP, ETL, Database security, Database tuning","Relational database, Database normalization, Database denormalization, NoSQL, ACID (computer science), CAP theorem, Geographic information system, Spatial database, Data warehouse, Multidimensional data model, Star schema, Snowflake schema, OLAP, Extract, transform, load, Database performance, Database security.","Relational database, database normalization, database denormalization, NoSQL, ACID (computer science), CAP theorem, geographic information system, spatial database, data warehouse, multidimensional data model, star schema, snowflake schema, OLAP, ETL, database performance, database security
"
7,Fundamentals of Data Science,"Laboratory exercises illustrating selected problems of data analysis: 1. Outlier detection 2. Data dimensionality reduction. 3. Cluster analysis. 4. Classification. 5. Recommender systems and text mining.
Individual projects aimed at familiarizing with realworld data science problems.
1. Introduction to Data Science - history and methodological background.
2. Typical workflow of data analysis.
3. Data preprocessing - data reduction, cleaning, handling missing elements.
4. Unsupervised learning - outlier detection and
cluster analysis.
5. Classification and regression.
6. Recommender systems and text mining.
7. Big Data - brief overview of issues and
computational methods","Outlier detection, Big Data, text mining, Recommender system, Unsupervised learning, dimensionality reduction, Cluster analysis, Classification, regression","Outlier detection, Dimensionality reduction, Cluster analysis, Classification, Recommender system, Text mining, Data analysis, Data preprocessing, Data reduction, Unsupervised learning, Regression analysis, Big data.","Outlier detection, Dimensionality reduction, Cluster analysis, Classification, Recommender system, Text mining, Data preprocessing, Data cleaning, Regression analysis, Unsupervised learning, Big data
"
8,Introduction to the Semantic Web and Knowledge Graphs,1. Main concepts of the Semantic Web and knowledge graphs 2. Modeling metadata 3. Querying metadata 4. Modeling knowledge with taxonomies and ontologies 5. Basics of ontology engineering 6. Ontological reasoning 7. Applications of the Semantic Web and knowledge graphs,"Semantic Web, knowledge graph, metadata, querying, taxonomy, ontology, ontology engineering, ontological reasoning","Semantic Web, Knowledge graph, Metadata, Query language (databases), Taxonomy, Ontology (information science), Ontology engineering, Ontological reasoning","Semantic web, knowledge graph, metadata, query language (databases), taxonomy, ontology, ontology engineering, ontological reasoning
"
9,Human-Computer Interaction,"Psychological aspects of Human-Computer Interaction.
1. Designing experiments in the field.
2. Apparatures including wearables in emotion recognition.
3. Individual differences 
Human-Robot Interaction.
1. Role of popculture in robotics.
2. Designing robots.
Entertainment.
1. Virtual Reality.
2. Games.","Human-Computer Interaction, experiment design, emotion recognition, Human-Robot Interaction, robotics, computer game, virtual reality","Experiment design, Emotion recognition, Individual differences, Human-robot interaction, Virtual reality, Game design","Human-computer interaction, Experiment design, Wearable computer, Emotion recognition, Individual differences (psychology), Human-robot interaction, Robotics, Pop culture, Virtual reality, Game
"
10,Python Language,"Python in a nutshell: Student knows Python language syntax Student knows basic data srtuctures and control flow tools. Lists, tuples and strings: Student knows the most commonly used data structures: lists and tuples. Student knows string methods. Dictionaries: Student knows what they are and how to use dictionaries. Functions: Student knows how to define functions, pass arguments and return value. Student knows variable scope rules. Lambda expressions: Student knows anonymous functions. Built-in functions: Student knows basic built-in functions. Generators and generator expressions: Student knows what they are and how to construct and use generators. Student knows what they are and how to use generators expressions. Files: Student knows how to read and write files. Modules: Student knows what they are and how to use modules. Classes: Student knows how to construct class. Student knows inheritance in particular multiple Inheritance","Python, control flow, data structure, CPython, iterator, exception handling, class (programming), inheritance (programming), multiple inheritance, Python module, lambda expressions, anonymous function, string, Dictionary, Python tuple, Python List, generator, Function, variable scope, file (programming)","Syntax, Data structure, Control flow, List, Tuple, String, String methods, Dictionary, Function, Argument (computer science), Return value, Variable scope, Lambda expression, Built-in function, Generator (computer science), File (computer science), Module (programming), Class (computer science), Inheritance (object-oriented programming), Multiple inheritance","Python syntax, data structure, control flow, list, tuple, string (computer science), string method, dictionary (data structure), function (computer science), argument (computer science), return value, variable scope, lambda expression, built-in function, generator (computer science), generator expression, file (computer science), module (programming), class (computer programming), inheritance (object-oriented programming), multiple inheritance
"
